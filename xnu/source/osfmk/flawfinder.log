COMMAND : flawfinder -SQ <file_name>
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 121 in 0.53 seconds (3782 lines/second)
Physical Source Lines of Code (SLOC) = 75
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 44 in 0.53 seconds (1408 lines/second)
Physical Source Lines of Code (SLOC) = 13
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 35 in 0.53 seconds (1146 lines/second)
Physical Source Lines of Code (SLOC) = 7
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/chud/chud_thread.c:267:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/chud/chud_thread.c:372:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 2
Lines analyzed = 509 in 0.55 seconds (9548 lines/second)
Physical Source Lines of Code (SLOC) = 343
Hits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 5.8309 [1+] 5.8309 [2+] 5.8309 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 68 in 0.53 seconds (2074 lines/second)
Physical Source Lines of Code (SLOC) = 26
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 59 in 0.53 seconds (1899 lines/second)
Physical Source Lines of Code (SLOC) = 24
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 549 in 0.56 seconds (9790 lines/second)
Physical Source Lines of Code (SLOC) = 434
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 273 in 0.56 seconds (4813 lines/second)
Physical Source Lines of Code (SLOC) = 223
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 28 in 0.53 seconds (946 lines/second)
Physical Source Lines of Code (SLOC) = 0
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0

Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 1182 in 0.63 seconds (8936 lines/second)
Physical Source Lines of Code (SLOC) = 998
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/chud/ppc/chud_thread_ppc.c:333:  [1] (buffer) read: Check buffer boundaries if used in a loop. 

Hits = 1
Lines analyzed = 586 in 0.59 seconds (6417 lines/second)
Physical Source Lines of Code (SLOC) = 476
Hits@level = [0]   0 [1]   1 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 2.10084 [1+] 2.10084 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 38 in 0.53 seconds (1225 lines/second)
Physical Source Lines of Code (SLOC) = 7
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 86 in 0.53 seconds (2774 lines/second)
Physical Source Lines of Code (SLOC) = 47
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 41 in 0.55 seconds (899 lines/second)
Physical Source Lines of Code (SLOC) = 9
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 62 in 0.53 seconds (1961 lines/second)
Physical Source Lines of Code (SLOC) = 21
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 28 in 0.54 seconds (670 lines/second)
Physical Source Lines of Code (SLOC) = 0
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0

Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 165 in 0.54 seconds (4605 lines/second)
Physical Source Lines of Code (SLOC) = 103
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 607 in 0.55 seconds (11792 lines/second)
Physical Source Lines of Code (SLOC) = 468
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/chud/i386/chud_thread_i386.c:114:  [1] (buffer) read: Check buffer boundaries if used in a loop. 

Hits = 1
Lines analyzed = 713 in 0.56 seconds (11575 lines/second)
Physical Source Lines of Code (SLOC) = 496
Hits@level = [0]   0 [1]   1 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 2.01613 [1+] 2.01613 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 32 in 0.53 seconds (1081 lines/second)
Physical Source Lines of Code (SLOC) = 3
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 28 in 0.53 seconds (897 lines/second)
Physical Source Lines of Code (SLOC) = 0
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0

Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 260 in 0.54 seconds (5931 lines/second)
Physical Source Lines of Code (SLOC) = 160
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 35 in 0.53 seconds (1164 lines/second)
Physical Source Lines of Code (SLOC) = 4
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/x86_64/loose_ends.c:193:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/x86_64/loose_ends.c:469:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 2
Lines analyzed = 932 in 0.58 seconds (12044 lines/second)
Physical Source Lines of Code (SLOC) = 613
Hits@level = [0]   0 [1]   1 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 3.26264 [1+] 3.26264 [2+] 1.63132 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 280 in 0.54 seconds (7239 lines/second)
Physical Source Lines of Code (SLOC) = 264
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/x86_64/lowglobals.h:59:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 77 in 0.53 seconds (2256 lines/second)
Physical Source Lines of Code (SLOC) = 30
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 33.3333 [1+] 33.3333 [2+] 33.3333 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 3642 in 0.76 seconds (13837 lines/second)
Physical Source Lines of Code (SLOC) = 2112
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 29 in 0.54 seconds (810 lines/second)
Physical Source Lines of Code (SLOC) = 1
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/default_pager/default_pager_internal.h:105:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 

Hits = 1
Lines analyzed = 776 in 0.58 seconds (9665 lines/second)
Physical Source Lines of Code (SLOC) = 475
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+] 2.10526 [1+] 2.10526 [2+] 2.10526 [3+] 2.10526 [4+] 2.10526 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 443 in 0.55 seconds (8328 lines/second)
Physical Source Lines of Code (SLOC) = 227
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 121 in 0.54 seconds (3411 lines/second)
Physical Source Lines of Code (SLOC) = 65
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 1149 in 0.59 seconds (12629 lines/second)
Physical Source Lines of Code (SLOC) = 671
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/default_pager/dp_backing_store.c:1882:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/default_pager/dp_backing_store.c:1917:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/default_pager/dp_backing_store.c:2475:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/default_pager/dp_backing_store.c:2493:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 4
Lines analyzed = 4236 in 0.81 seconds (13531 lines/second)
Physical Source Lines of Code (SLOC) = 2896
Hits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 1.38122 [1+] 1.38122 [2+] 1.38122 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 67 in 0.54 seconds (1890 lines/second)
Physical Source Lines of Code (SLOC) = 29
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 62 in 0.53 seconds (1861 lines/second)
Physical Source Lines of Code (SLOC) = 28
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 104 in 0.53 seconds (2997 lines/second)
Physical Source Lines of Code (SLOC) = 32
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/device/device_types.h:86:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/device/device_types.h:87:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/device/device_types.h:88:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 3
Lines analyzed = 141 in 0.55 seconds (2682 lines/second)
Physical Source Lines of Code (SLOC) = 50
Hits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]  60 [1+]  60 [2+]  60 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/device/subrs.c:142:  [4] (buffer) strcpy: Does not check for buffer overflows when copying to destination. Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/device/subrs.c:145:  [4] (buffer) strcpy: Does not check for buffer overflows when copying to destination. Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/device/subrs.c:266:  [4] (buffer) strcpy: Does not check for buffer overflows when copying to destination. Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/device/subrs.c:432:  [4] (buffer) strcat: Does not check for buffer overflows when concatenating to destination. Consider using strncat or strlcat (warning, strncat is easily misused). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/device/subrs.c:316:  [2] (integer) atoi: Unless checked, the resulting number can exceed the expected range.  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/device/subrs.c:405:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/device/subrs.c:548:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/device/subrs.c:146:  [1] (buffer) strncpy: Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/device/subrs.c:147:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/device/subrs.c:289:  [1] (buffer) strncpy: Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/device/subrs.c:467:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/device/subrs.c:544:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 12
Lines analyzed = 566 in 0.60 seconds (5649 lines/second)
Physical Source Lines of Code (SLOC) = 244
Hits@level = [0]   0 [1]   5 [2]   3 [3]   0 [4]   4 [5]   0
Hits@level+ = [0+]  12 [1+]  12 [2+]   7 [3+]   4 [4+]   4 [5+]   0
Hits/KSLOC@level+ = [0+] 49.1803 [1+] 49.1803 [2+] 28.6885 [3+] 16.3934 [4+] 16.3934 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 582 in 0.55 seconds (11042 lines/second)
Physical Source Lines of Code (SLOC) = 397
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 80 in 0.55 seconds (1755 lines/second)
Physical Source Lines of Code (SLOC) = 11
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 243 in 0.55 seconds (5084 lines/second)
Physical Source Lines of Code (SLOC) = 70
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/UserNotification/KUNCUserNotifications.c:218:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 433 in 0.58 seconds (5550 lines/second)
Physical Source Lines of Code (SLOC) = 314
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 3.18471 [1+] 3.18471 [2+] 3.18471 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 81 in 0.53 seconds (2394 lines/second)
Physical Source Lines of Code (SLOC) = 27
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/sys/syslog.h:199:  [4] (format) syslog: If syslog's format strings can be influenced by an attacker, they can be exploited. Use a constant format string for syslog. 

Hits = 1
Lines analyzed = 203 in 0.55 seconds (4049 lines/second)
Physical Source Lines of Code (SLOC) = 50
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+]  20 [1+]  20 [2+]  20 [3+]  20 [4+]  20 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 172 in 0.55 seconds (3236 lines/second)
Physical Source Lines of Code (SLOC) = 39
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 49 in 0.54 seconds (1217 lines/second)
Physical Source Lines of Code (SLOC) = 9
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/pmc/pmc.c:594:  [2] (misc) open: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/pmc/pmc.c:1757:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/pmc/pmc.c:1843:  [2] (misc) open: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/pmc/pmc.c:1874:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/pmc/pmc.c:2185:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/pmc/pmc.c:2148:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/pmc/pmc.c:2153:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 7
Lines analyzed = 2855 in 0.74 seconds (12011 lines/second)
Physical Source Lines of Code (SLOC) = 1582
Hits@level = [0]   0 [1]   2 [2]   5 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   7 [1+]   7 [2+]   5 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 4.42478 [1+] 4.42478 [2+] 3.16056 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/pmc/pmc.h:310:  [2] (misc) open: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 

Hits = 1
Lines analyzed = 709 in 0.61 seconds (6207 lines/second)
Physical Source Lines of Code (SLOC) = 158
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 6.32911 [1+] 6.32911 [2+] 6.32911 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/misc_protos.h:114:  [4] (buffer) sscanf: The scanf() family's %s operation, without a limit specification, permits buffer overflows. Specify a limit to %s, or use a different input function. If the scanf format is influenceable by an attacker, it's exploitable.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/misc_protos.h:117:  [4] (format) sprintf: Potential format string problem. Make format string constant. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/misc_protos.h:119:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/misc_protos.h:127:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/misc_protos.h:129:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/misc_protos.h:143:  [4] (format) snprintf: If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always \0-terminate. Use a constant for the format specification. 

Hits = 6
Lines analyzed = 215 in 0.54 seconds (4971 lines/second)
Physical Source Lines of Code (SLOC) = 117
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   6 [5]   0
Hits@level+ = [0+]   6 [1+]   6 [2+]   6 [3+]   6 [4+]   6 [5+]   0
Hits/KSLOC@level+ = [0+] 51.2821 [1+] 51.2821 [2+] 51.2821 [3+] 51.2821 [4+] 51.2821 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 237 in 0.54 seconds (5658 lines/second)
Physical Source Lines of Code (SLOC) = 112
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/printf.c:188:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/printf.c:784:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/printf.c:882:  [4] (format) sprintf: Potential format string problem. Make format string constant. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/printf.c:206:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/printf.c:570:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/printf.c:594:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/printf.c:892:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 7
Lines analyzed = 893 in 0.58 seconds (11603 lines/second)
Physical Source Lines of Code (SLOC) = 614
Hits@level = [0]   0 [1]   2 [2]   2 [3]   0 [4]   3 [5]   0
Hits@level+ = [0+]   7 [1+]   7 [2+]   5 [3+]   3 [4+]   3 [5+]   0
Hits/KSLOC@level+ = [0+] 11.4007 [1+] 11.4007 [2+] 8.14332 [3+] 4.88599 [4+] 4.88599 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 146 in 0.54 seconds (3619 lines/second)
Physical Source Lines of Code (SLOC) = 90
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 63 in 0.55 seconds (1266 lines/second)
Physical Source Lines of Code (SLOC) = 7
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 421 in 0.55 seconds (8876 lines/second)
Physical Source Lines of Code (SLOC) = 253
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 176 in 0.55 seconds (3371 lines/second)
Physical Source Lines of Code (SLOC) = 75
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/zalloc.c:257:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/zalloc.c:359:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/zalloc.c:776:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/zalloc.c:258:  [1] (port) snprintf: On some very old systems, snprintf is incorrectly implemented and permits buffer overflows; there are also incompatible standard definitions of it. Check it during installation, or use something else. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/zalloc.c:2037:  [1] (buffer) strncpy: Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/zalloc.c:2058:  [1] (buffer) strncpy: Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers. 

Hits = 6
Lines analyzed = 2435 in 0.67 seconds (14061 lines/second)
Physical Source Lines of Code (SLOC) = 1568
Hits@level = [0]   0 [1]   3 [2]   3 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   6 [1+]   6 [2+]   3 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 3.82653 [1+] 3.82653 [2+] 1.91327 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/ipc_mig.c:433:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/ipc_mig.c:502:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/ipc_mig.c:515:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/ipc_mig.c:522:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 4
Lines analyzed = 861 in 0.57 seconds (11606 lines/second)
Physical Source Lines of Code (SLOC) = 479
Hits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 8.35073 [1+] 8.35073 [2+] 8.35073 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 66 in 0.53 seconds (2094 lines/second)
Physical Source Lines of Code (SLOC) = 29
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 504 in 0.55 seconds (9416 lines/second)
Physical Source Lines of Code (SLOC) = 247
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 115 in 0.53 seconds (3520 lines/second)
Physical Source Lines of Code (SLOC) = 49
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 501 in 0.55 seconds (10112 lines/second)
Physical Source Lines of Code (SLOC) = 317
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 217 in 0.54 seconds (5983 lines/second)
Physical Source Lines of Code (SLOC) = 149
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/host.c:282:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/host.c:284:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/host.c:563:  [1] (buffer) strncpy: Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers. 

Hits = 3
Lines analyzed = 818 in 0.59 seconds (8659 lines/second)
Physical Source Lines of Code (SLOC) = 526
Hits@level = [0]   0 [1]   1 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 5.70342 [1+] 5.70342 [2+] 3.80228 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 64 in 0.55 seconds (1391 lines/second)
Physical Source Lines of Code (SLOC) = 20
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 108 in 0.53 seconds (3274 lines/second)
Physical Source Lines of Code (SLOC) = 58
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 70 in 0.53 seconds (2238 lines/second)
Physical Source Lines of Code (SLOC) = 18
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 283 in 0.54 seconds (6431 lines/second)
Physical Source Lines of Code (SLOC) = 102
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/bsd_kern.c:51:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 696 in 0.57 seconds (9613 lines/second)
Physical Source Lines of Code (SLOC) = 488
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 2.04918 [1+] 2.04918 [2+] 2.04918 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 123 in 0.53 seconds (3522 lines/second)
Physical Source Lines of Code (SLOC) = 37
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/locks.h:113:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 474 in 0.55 seconds (10147 lines/second)
Physical Source Lines of Code (SLOC) = 322
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 3.10559 [1+] 3.10559 [2+] 3.10559 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 199 in 0.54 seconds (4919 lines/second)
Physical Source Lines of Code (SLOC) = 76
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 78 in 0.53 seconds (2354 lines/second)
Physical Source Lines of Code (SLOC) = 34
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 59 in 0.54 seconds (1371 lines/second)
Physical Source Lines of Code (SLOC) = 12
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 41 in 0.53 seconds (1366 lines/second)
Physical Source Lines of Code (SLOC) = 11
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 176 in 0.54 seconds (4736 lines/second)
Physical Source Lines of Code (SLOC) = 91
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 157 in 0.54 seconds (4144 lines/second)
Physical Source Lines of Code (SLOC) = 50
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 80 in 0.53 seconds (2348 lines/second)
Physical Source Lines of Code (SLOC) = 21
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/debug.h:53:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 222 in 0.55 seconds (4347 lines/second)
Physical Source Lines of Code (SLOC) = 139
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 7.19424 [1+] 7.19424 [2+] 7.19424 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 299 in 0.54 seconds (7141 lines/second)
Physical Source Lines of Code (SLOC) = 208
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 564 in 0.56 seconds (9280 lines/second)
Physical Source Lines of Code (SLOC) = 341
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 71 in 0.57 seconds (1040 lines/second)
Physical Source Lines of Code (SLOC) = 24
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/processor.c:841:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 1
Lines analyzed = 958 in 0.58 seconds (11371 lines/second)
Physical Source Lines of Code (SLOC) = 651
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 1.5361 [1+] 1.5361 [2+] 1.5361 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 108 in 0.57 seconds (1464 lines/second)
Physical Source Lines of Code (SLOC) = 42
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 389 in 0.55 seconds (7677 lines/second)
Physical Source Lines of Code (SLOC) = 188
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 166 in 0.56 seconds (2619 lines/second)
Physical Source Lines of Code (SLOC) = 87
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 73 in 0.53 seconds (2276 lines/second)
Physical Source Lines of Code (SLOC) = 16
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 150 in 0.54 seconds (3902 lines/second)
Physical Source Lines of Code (SLOC) = 53
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 199 in 0.54 seconds (5033 lines/second)
Physical Source Lines of Code (SLOC) = 77
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 230 in 0.54 seconds (5548 lines/second)
Physical Source Lines of Code (SLOC) = 72
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 112 in 0.54 seconds (3045 lines/second)
Physical Source Lines of Code (SLOC) = 40
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 75 in 0.53 seconds (2364 lines/second)
Physical Source Lines of Code (SLOC) = 34
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 763 in 0.57 seconds (11422 lines/second)
Physical Source Lines of Code (SLOC) = 409
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 94 in 0.55 seconds (1983 lines/second)
Physical Source Lines of Code (SLOC) = 15
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 207 in 0.55 seconds (3951 lines/second)
Physical Source Lines of Code (SLOC) = 85
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 215 in 0.56 seconds (3609 lines/second)
Physical Source Lines of Code (SLOC) = 123
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 192 in 0.54 seconds (4981 lines/second)
Physical Source Lines of Code (SLOC) = 89
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 52 in 0.53 seconds (1516 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 395 in 0.55 seconds (7429 lines/second)
Physical Source Lines of Code (SLOC) = 212
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 267 in 0.55 seconds (5633 lines/second)
Physical Source Lines of Code (SLOC) = 140
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 107 in 0.53 seconds (3080 lines/second)
Physical Source Lines of Code (SLOC) = 33
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 1068 in 0.58 seconds (13972 lines/second)
Physical Source Lines of Code (SLOC) = 661
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 70 in 0.53 seconds (2228 lines/second)
Physical Source Lines of Code (SLOC) = 27
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 134 in 0.55 seconds (2656 lines/second)
Physical Source Lines of Code (SLOC) = 51
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 425 in 0.55 seconds (8260 lines/second)
Physical Source Lines of Code (SLOC) = 322
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/ipc_kobject.c:597:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 

Hits = 1
Lines analyzed = 652 in 0.57 seconds (9671 lines/second)
Physical Source Lines of Code (SLOC) = 408
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+] 2.45098 [1+] 2.45098 [2+] 2.45098 [3+] 2.45098 [4+] 2.45098 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 135 in 0.54 seconds (3576 lines/second)
Physical Source Lines of Code (SLOC) = 27
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 883 in 0.57 seconds (12165 lines/second)
Physical Source Lines of Code (SLOC) = 499
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 215 in 0.54 seconds (5849 lines/second)
Physical Source Lines of Code (SLOC) = 131
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/kmod.c:74:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/kmod.c:82:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 2
Lines analyzed = 161 in 0.54 seconds (3697 lines/second)
Physical Source Lines of Code (SLOC) = 82
Hits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 24.3902 [1+] 24.3902 [2+] 24.3902 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 1566 in 0.66 seconds (9764 lines/second)
Physical Source Lines of Code (SLOC) = 1057
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 45 in 0.55 seconds (950 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 822 in 0.57 seconds (12529 lines/second)
Physical Source Lines of Code (SLOC) = 543
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 48 in 0.53 seconds (1564 lines/second)
Physical Source Lines of Code (SLOC) = 13
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 63 in 0.53 seconds (2049 lines/second)
Physical Source Lines of Code (SLOC) = 19
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/locks.c:118:  [1] (buffer) strncpy: Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers. Risk is low because the source is a constant string.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/locks.c:223:  [1] (buffer) strncpy: Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/locks.c:973:  [1] (buffer) strncpy: Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers. 

Hits = 3
Lines analyzed = 1170 in 0.59 seconds (12469 lines/second)
Physical Source Lines of Code (SLOC) = 796
Hits@level = [0]   0 [1]   3 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 3.76884 [1+] 3.76884 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 395 in 0.55 seconds (7472 lines/second)
Physical Source Lines of Code (SLOC) = 213
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 168 in 0.54 seconds (4353 lines/second)
Physical Source Lines of Code (SLOC) = 63
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/task.c:1075:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 1
Lines analyzed = 2003 in 0.64 seconds (14233 lines/second)
Physical Source Lines of Code (SLOC) = 1234
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 0.810373 [1+] 0.810373 [2+] 0.810373 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 489 in 0.56 seconds (8364 lines/second)
Physical Source Lines of Code (SLOC) = 291
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 175 in 0.54 seconds (4632 lines/second)
Physical Source Lines of Code (SLOC) = 73
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 58 in 0.53 seconds (1808 lines/second)
Physical Source Lines of Code (SLOC) = 17
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 164 in 0.55 seconds (3152 lines/second)
Physical Source Lines of Code (SLOC) = 61
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 72 in 0.54 seconds (2002 lines/second)
Physical Source Lines of Code (SLOC) = 9
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 298 in 0.57 seconds (4157 lines/second)
Physical Source Lines of Code (SLOC) = 165
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 123 in 0.53 seconds (3547 lines/second)
Physical Source Lines of Code (SLOC) = 58
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 638 in 0.57 seconds (9342 lines/second)
Physical Source Lines of Code (SLOC) = 306
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 197 in 0.55 seconds (3876 lines/second)
Physical Source Lines of Code (SLOC) = 98
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 896 in 0.57 seconds (13447 lines/second)
Physical Source Lines of Code (SLOC) = 571
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 75 in 0.53 seconds (2238 lines/second)
Physical Source Lines of Code (SLOC) = 26
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 139 in 0.54 seconds (3898 lines/second)
Physical Source Lines of Code (SLOC) = 51
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 140 in 0.54 seconds (3776 lines/second)
Physical Source Lines of Code (SLOC) = 81
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 307 in 0.54 seconds (6976 lines/second)
Physical Source Lines of Code (SLOC) = 141
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 329 in 0.56 seconds (5899 lines/second)
Physical Source Lines of Code (SLOC) = 189
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 914 in 0.57 seconds (13170 lines/second)
Physical Source Lines of Code (SLOC) = 507
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 46 in 0.55 seconds (1019 lines/second)
Physical Source Lines of Code (SLOC) = 12
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/debug.c:120:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/debug.c:124:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/debug.c:362:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/debug.c:376:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/debug.c:392:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/debug.c:412:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 6
Lines analyzed = 562 in 0.56 seconds (9708 lines/second)
Physical Source Lines of Code (SLOC) = 389
Hits@level = [0]   0 [1]   0 [2]   6 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   6 [1+]   6 [2+]   6 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 15.4242 [1+] 15.4242 [2+] 15.4242 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/sched_prim.c:3321:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 

Hits = 1
Lines analyzed = 3349 in 0.69 seconds (17300 lines/second)
Physical Source Lines of Code (SLOC) = 1983
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+] 0.504286 [1+] 0.504286 [2+] 0.504286 [3+] 0.504286 [4+] 0.504286 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 87 in 0.53 seconds (2724 lines/second)
Physical Source Lines of Code (SLOC) = 33
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 80 in 0.54 seconds (2277 lines/second)
Physical Source Lines of Code (SLOC) = 15
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 106 in 0.54 seconds (2946 lines/second)
Physical Source Lines of Code (SLOC) = 26
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/kalloc.c:119:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/kalloc.c:435:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/kalloc.c:602:  [1] (buffer) strncpy: Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers. 

Hits = 3
Lines analyzed = 727 in 0.57 seconds (10504 lines/second)
Physical Source Lines of Code (SLOC) = 448
Hits@level = [0]   0 [1]   1 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 6.69643 [1+] 6.69643 [2+] 4.46429 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 200 in 0.55 seconds (4138 lines/second)
Physical Source Lines of Code (SLOC) = 131
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/syscall_sw.c:229:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 374 in 0.56 seconds (6091 lines/second)
Physical Source Lines of Code (SLOC) = 277
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 3.61011 [1+] 3.61011 [2+] 3.61011 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 59 in 0.53 seconds (1860 lines/second)
Physical Source Lines of Code (SLOC) = 16
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 78 in 0.53 seconds (2495 lines/second)
Physical Source Lines of Code (SLOC) = 32
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 64 in 0.53 seconds (2027 lines/second)
Physical Source Lines of Code (SLOC) = 19
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 477 in 0.55 seconds (9326 lines/second)
Physical Source Lines of Code (SLOC) = 300
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 1993 in 0.62 seconds (15990 lines/second)
Physical Source Lines of Code (SLOC) = 1146
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 779 in 0.58 seconds (10346 lines/second)
Physical Source Lines of Code (SLOC) = 472
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 1661 in 0.62 seconds (13957 lines/second)
Physical Source Lines of Code (SLOC) = 935
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 962 in 0.57 seconds (14597 lines/second)
Physical Source Lines of Code (SLOC) = 562
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 41 in 0.53 seconds (1364 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 83 in 0.53 seconds (2474 lines/second)
Physical Source Lines of Code (SLOC) = 14
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 317 in 0.54 seconds (7915 lines/second)
Physical Source Lines of Code (SLOC) = 214
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/kern_types.h:48:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 136 in 0.53 seconds (3960 lines/second)
Physical Source Lines of Code (SLOC) = 68
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 14.7059 [1+] 14.7059 [2+] 14.7059 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kern/machine.c:331:  [1] (buffer) strncpy: Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers. 

Hits = 1
Lines analyzed = 334 in 0.55 seconds (7225 lines/second)
Physical Source Lines of Code (SLOC) = 178
Hits@level = [0]   0 [1]   1 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 5.61798 [1+] 5.61798 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 135 in 0.54 seconds (3749 lines/second)
Physical Source Lines of Code (SLOC) = 34
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 463 in 0.55 seconds (10185 lines/second)
Physical Source Lines of Code (SLOC) = 331
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 436 in 0.54 seconds (9810 lines/second)
Physical Source Lines of Code (SLOC) = 296
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 101 in 0.53 seconds (2977 lines/second)
Physical Source Lines of Code (SLOC) = 27
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 70 in 0.54 seconds (1978 lines/second)
Physical Source Lines of Code (SLOC) = 34
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 191 in 0.54 seconds (4973 lines/second)
Physical Source Lines of Code (SLOC) = 81
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 131 in 0.54 seconds (3664 lines/second)
Physical Source Lines of Code (SLOC) = 62
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 61 in 0.53 seconds (1980 lines/second)
Physical Source Lines of Code (SLOC) = 17
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 92 in 0.53 seconds (2772 lines/second)
Physical Source Lines of Code (SLOC) = 40
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/misc_protos.h:122:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 

Hits = 1
Lines analyzed = 138 in 0.53 seconds (4040 lines/second)
Physical Source Lines of Code (SLOC) = 76
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+] 13.1579 [1+] 13.1579 [2+] 13.1579 [3+] 13.1579 [4+] 13.1579 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 68 in 0.53 seconds (2196 lines/second)
Physical Source Lines of Code (SLOC) = 27
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 89 in 0.53 seconds (2769 lines/second)
Physical Source Lines of Code (SLOC) = 42
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/vmachmon.h:47:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/vmachmon.h:54:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 2
Lines analyzed = 498 in 0.57 seconds (7499 lines/second)
Physical Source Lines of Code (SLOC) = 329
Hits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 6.07903 [1+] 6.07903 [2+] 6.07903 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 85 in 0.53 seconds (2563 lines/second)
Physical Source Lines of Code (SLOC) = 26
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 122 in 0.54 seconds (3274 lines/second)
Physical Source Lines of Code (SLOC) = 54
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 302 in 0.55 seconds (6160 lines/second)
Physical Source Lines of Code (SLOC) = 207
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 93 in 0.54 seconds (2644 lines/second)
Physical Source Lines of Code (SLOC) = 36
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 837 in 0.57 seconds (12255 lines/second)
Physical Source Lines of Code (SLOC) = 561
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 1184 in 0.59 seconds (13020 lines/second)
Physical Source Lines of Code (SLOC) = 782
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/status.c:344:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/status.c:910:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/status.c:947:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/status.c:1047:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/status.c:1066:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/status.c:1084:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/status.c:1570:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/status.c:1595:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/status.c:1615:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 9
Lines analyzed = 1820 in 0.67 seconds (10742 lines/second)
Physical Source Lines of Code (SLOC) = 1274
Hits@level = [0]   0 [1]   0 [2]   9 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   9 [1+]   9 [2+]   9 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 7.06436 [1+] 7.06436 [2+] 7.06436 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 124 in 0.53 seconds (3638 lines/second)
Physical Source Lines of Code (SLOC) = 70
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 693 in 0.57 seconds (9720 lines/second)
Physical Source Lines of Code (SLOC) = 507
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 35 in 0.53 seconds (1175 lines/second)
Physical Source Lines of Code (SLOC) = 3
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 195 in 0.54 seconds (4686 lines/second)
Physical Source Lines of Code (SLOC) = 103
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 301 in 0.56 seconds (5227 lines/second)
Physical Source Lines of Code (SLOC) = 256
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 120 in 0.54 seconds (3258 lines/second)
Physical Source Lines of Code (SLOC) = 46
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 186 in 0.54 seconds (4734 lines/second)
Physical Source Lines of Code (SLOC) = 95
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 220 in 0.54 seconds (5817 lines/second)
Physical Source Lines of Code (SLOC) = 158
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 105 in 0.53 seconds (3027 lines/second)
Physical Source Lines of Code (SLOC) = 31
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/console_feed.c:132:  [1] (buffer) getc: Check buffer boundaries if used in a loop. 

Hits = 1
Lines analyzed = 266 in 0.54 seconds (6622 lines/second)
Physical Source Lines of Code (SLOC) = 179
Hits@level = [0]   0 [1]   1 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 5.58659 [1+] 5.58659 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/ppc_vm_init.c:379:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 1
Lines analyzed = 427 in 0.56 seconds (7043 lines/second)
Physical Source Lines of Code (SLOC) = 249
Hits@level = [0]   0 [1]   1 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 4.01606 [1+] 4.01606 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 428 in 0.56 seconds (6830 lines/second)
Physical Source Lines of Code (SLOC) = 261
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 51 in 0.53 seconds (1670 lines/second)
Physical Source Lines of Code (SLOC) = 16
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/mappings.c:100:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 1805 in 0.69 seconds (9419 lines/second)
Physical Source Lines of Code (SLOC) = 1005
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 0.995025 [1+] 0.995025 [2+] 0.995025 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 83 in 0.54 seconds (2004 lines/second)
Physical Source Lines of Code (SLOC) = 7
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 41 in 0.57 seconds (580 lines/second)
Physical Source Lines of Code (SLOC) = 4
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 45 in 0.53 seconds (1488 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/db_interface.c:462:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 592 in 0.56 seconds (10500 lines/second)
Physical Source Lines of Code (SLOC) = 428
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 2.33645 [1+] 2.33645 [2+] 2.33645 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 87 in 0.53 seconds (2599 lines/second)
Physical Source Lines of Code (SLOC) = 9
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 338 in 0.57 seconds (4821 lines/second)
Physical Source Lines of Code (SLOC) = 257
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 337 in 0.54 seconds (8082 lines/second)
Physical Source Lines of Code (SLOC) = 198
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 36 in 0.53 seconds (1170 lines/second)
Physical Source Lines of Code (SLOC) = 1
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:121:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:122:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:298:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:347:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:394:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:468:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:471:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:472:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:473:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:477:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:478:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:479:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:491:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:492:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:494:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:497:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:498:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:499:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:505:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:506:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:507:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:519:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:520:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:521:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:523:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:526:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:527:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:528:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:534:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:535:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:536:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:541:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:551:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:561:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:562:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:563:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:564:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:566:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:568:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:569:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:570:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:574:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:575:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:576:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:581:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:582:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:583:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/bcopytest.c:590:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 48
Lines analyzed = 621 in 0.58 seconds (7671 lines/second)
Physical Source Lines of Code (SLOC) = 486
Hits@level = [0]   0 [1]   0 [2]  48 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]  48 [1+]  48 [2+]  48 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 98.7654 [1+] 98.7654 [2+] 98.7654 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 43 in 0.53 seconds (1428 lines/second)
Physical Source Lines of Code (SLOC) = 6
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/model_dep.c:131:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/model_dep.c:132:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/model_dep.c:133:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 3
Lines analyzed = 1045 in 0.61 seconds (9920 lines/second)
Physical Source Lines of Code (SLOC) = 693
Hits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 4.329 [1+] 4.329 [2+] 4.329 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 781 in 0.57 seconds (10560 lines/second)
Physical Source Lines of Code (SLOC) = 655
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 47 in 0.53 seconds (1509 lines/second)
Physical Source Lines of Code (SLOC) = 13
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 672 in 0.58 seconds (8803 lines/second)
Physical Source Lines of Code (SLOC) = 387
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 92 in 0.53 seconds (2783 lines/second)
Physical Source Lines of Code (SLOC) = 40
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/commpage/commpage.c:324:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/commpage/commpage.c:610:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 2
Lines analyzed = 679 in 0.57 seconds (10104 lines/second)
Physical Source Lines of Code (SLOC) = 446
Hits@level = [0]   0 [1]   1 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 4.4843 [1+] 4.4843 [2+] 2.24215 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 254 in 0.55 seconds (5436 lines/second)
Physical Source Lines of Code (SLOC) = 128
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 52 in 0.53 seconds (1624 lines/second)
Physical Source Lines of Code (SLOC) = 13
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 743 in 0.59 seconds (8381 lines/second)
Physical Source Lines of Code (SLOC) = 430
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 38 in 0.53 seconds (1146 lines/second)
Physical Source Lines of Code (SLOC) = 5
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/lowglobals.h:60:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 101 in 0.54 seconds (2760 lines/second)
Physical Source Lines of Code (SLOC) = 52
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 19.2308 [1+] 19.2308 [2+] 19.2308 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 63 in 0.53 seconds (1916 lines/second)
Physical Source Lines of Code (SLOC) = 1
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 450 in 0.57 seconds (6883 lines/second)
Physical Source Lines of Code (SLOC) = 269
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 57 in 0.53 seconds (1834 lines/second)
Physical Source Lines of Code (SLOC) = 6
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 327 in 0.56 seconds (5713 lines/second)
Physical Source Lines of Code (SLOC) = 116
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 86 in 0.53 seconds (2485 lines/second)
Physical Source Lines of Code (SLOC) = 13
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/vmachmon.c:1625:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 1
Lines analyzed = 2024 in 0.71 seconds (9517 lines/second)
Physical Source Lines of Code (SLOC) = 1088
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 0.919118 [1+] 0.919118 [2+] 0.919118 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 61 in 0.53 seconds (1774 lines/second)
Physical Source Lines of Code (SLOC) = 20
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 571 in 0.57 seconds (8629 lines/second)
Physical Source Lines of Code (SLOC) = 300
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 45 in 0.53 seconds (1500 lines/second)
Physical Source Lines of Code (SLOC) = 11
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 2360 in 0.65 seconds (15644 lines/second)
Physical Source Lines of Code (SLOC) = 1572
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 150 in 0.54 seconds (4204 lines/second)
Physical Source Lines of Code (SLOC) = 75
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/trap.c:701:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/trap.c:702:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/trap.c:707:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/trap.c:709:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/trap.c:712:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/trap.c:713:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/trap.c:714:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/trap.c:715:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/trap.c:716:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/trap.c:717:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/trap.c:718:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/trap.c:721:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/trap.c:724:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/trap.c:733:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/trap.c:958:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 15
Lines analyzed = 1012 in 0.60 seconds (10625 lines/second)
Physical Source Lines of Code (SLOC) = 681
Hits@level = [0]   0 [1]   0 [2]  15 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]  15 [1+]  15 [2+]  15 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 22.0264 [1+] 22.0264 [2+] 22.0264 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/db_low_trace.c:183:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/db_low_trace.c:215:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/db_low_trace.c:1076:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/db_low_trace.c:1082:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 4
Lines analyzed = 1106 in 0.63 seconds (8724 lines/second)
Physical Source Lines of Code (SLOC) = 774
Hits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 5.16796 [1+] 5.16796 [2+] 5.16796 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 28 in 0.53 seconds (886 lines/second)
Physical Source Lines of Code (SLOC) = 1
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 130 in 0.53 seconds (3742 lines/second)
Physical Source Lines of Code (SLOC) = 82
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 40 in 0.53 seconds (1290 lines/second)
Physical Source Lines of Code (SLOC) = 6
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/pmap.h:194:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 338 in 0.56 seconds (5793 lines/second)
Physical Source Lines of Code (SLOC) = 204
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 4.90196 [1+] 4.90196 [2+] 4.90196 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 99 in 0.53 seconds (2861 lines/second)
Physical Source Lines of Code (SLOC) = 47
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 210 in 0.54 seconds (5742 lines/second)
Physical Source Lines of Code (SLOC) = 145
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 2096 in 0.70 seconds (10405 lines/second)
Physical Source Lines of Code (SLOC) = 1058
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 301 in 0.54 seconds (6764 lines/second)
Physical Source Lines of Code (SLOC) = 192
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 86 in 0.53 seconds (2590 lines/second)
Physical Source Lines of Code (SLOC) = 17
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 48 in 0.53 seconds (1562 lines/second)
Physical Source Lines of Code (SLOC) = 12
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 92 in 0.54 seconds (2525 lines/second)
Physical Source Lines of Code (SLOC) = 19
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 959 in 0.58 seconds (11730 lines/second)
Physical Source Lines of Code (SLOC) = 802
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 84 in 0.53 seconds (2408 lines/second)
Physical Source Lines of Code (SLOC) = 38
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 499 in 0.59 seconds (5854 lines/second)
Physical Source Lines of Code (SLOC) = 337
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 313 in 0.55 seconds (6208 lines/second)
Physical Source Lines of Code (SLOC) = 181
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 403 in 0.55 seconds (7844 lines/second)
Physical Source Lines of Code (SLOC) = 229
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 37 in 0.53 seconds (1222 lines/second)
Physical Source Lines of Code (SLOC) = 4
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 38 in 0.53 seconds (1284 lines/second)
Physical Source Lines of Code (SLOC) = 3
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/db_disasm.c:179:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/db_disasm.c:188:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ppc/db_disasm.c:214:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 3
Lines analyzed = 232 in 0.54 seconds (5739 lines/second)
Physical Source Lines of Code (SLOC) = 160
Hits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 18.75 [1+] 18.75 [2+] 18.75 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 41 in 0.53 seconds (1218 lines/second)
Physical Source Lines of Code (SLOC) = 6
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 63 in 0.53 seconds (2062 lines/second)
Physical Source Lines of Code (SLOC) = 21
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 659 in 0.56 seconds (10434 lines/second)
Physical Source Lines of Code (SLOC) = 382
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 393 in 0.56 seconds (6902 lines/second)
Physical Source Lines of Code (SLOC) = 257
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 166 in 0.54 seconds (4034 lines/second)
Physical Source Lines of Code (SLOC) = 101
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 212 in 0.54 seconds (4914 lines/second)
Physical Source Lines of Code (SLOC) = 108
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 187 in 0.54 seconds (5054 lines/second)
Physical Source Lines of Code (SLOC) = 118
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 49 in 0.53 seconds (1634 lines/second)
Physical Source Lines of Code (SLOC) = 11
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 1122 in 0.58 seconds (13447 lines/second)
Physical Source Lines of Code (SLOC) = 1004
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 1438 in 0.70 seconds (7300 lines/second)
Physical Source Lines of Code (SLOC) = 1243
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 48 in 0.53 seconds (1595 lines/second)
Physical Source Lines of Code (SLOC) = 12
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 306 in 0.54 seconds (7698 lines/second)
Physical Source Lines of Code (SLOC) = 205
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 80 in 0.53 seconds (2349 lines/second)
Physical Source Lines of Code (SLOC) = 40
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 186 in 0.54 seconds (4213 lines/second)
Physical Source Lines of Code (SLOC) = 141
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 141 in 0.54 seconds (3697 lines/second)
Physical Source Lines of Code (SLOC) = 46
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 62 in 0.54 seconds (1618 lines/second)
Physical Source Lines of Code (SLOC) = 21
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 70 in 0.53 seconds (2159 lines/second)
Physical Source Lines of Code (SLOC) = 5
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 81 in 0.53 seconds (2437 lines/second)
Physical Source Lines of Code (SLOC) = 28
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 74 in 0.53 seconds (2143 lines/second)
Physical Source Lines of Code (SLOC) = 8
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 178 in 0.54 seconds (4635 lines/second)
Physical Source Lines of Code (SLOC) = 91
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach_debug/lockgroup_info.h:44:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 75 in 0.53 seconds (2367 lines/second)
Physical Source Lines of Code (SLOC) = 35
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 28.5714 [1+] 28.5714 [2+] 28.5714 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 73 in 0.53 seconds (2167 lines/second)
Physical Source Lines of Code (SLOC) = 7
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 64 in 0.53 seconds (1929 lines/second)
Physical Source Lines of Code (SLOC) = 5
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 50 in 0.53 seconds (1535 lines/second)
Physical Source Lines of Code (SLOC) = 7
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 110 in 0.54 seconds (3046 lines/second)
Physical Source Lines of Code (SLOC) = 30
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 149 in 0.54 seconds (3514 lines/second)
Physical Source Lines of Code (SLOC) = 70
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach_debug/zone_info.h:73:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 93 in 0.53 seconds (2695 lines/second)
Physical Source Lines of Code (SLOC) = 22
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 45.4545 [1+] 45.4545 [2+] 45.4545 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach_debug/mach_debug_types.h:72:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 74 in 0.53 seconds (2233 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 100 [1+] 100 [2+] 100 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/profiling/profile-internal.h:331:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/profiling/profile-internal.h:333:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/profiling/profile-internal.h:226:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 3
Lines analyzed = 374 in 0.55 seconds (7360 lines/second)
Physical Source Lines of Code (SLOC) = 213
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   2 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   2 [4+]   2 [5+]   0
Hits/KSLOC@level+ = [0+] 14.0845 [1+] 14.0845 [2+] 14.0845 [3+] 9.38967 [4+] 9.38967 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 387 in 0.55 seconds (7382 lines/second)
Physical Source Lines of Code (SLOC) = 238
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 60 in 0.53 seconds (1905 lines/second)
Physical Source Lines of Code (SLOC) = 15
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 144 in 0.54 seconds (3609 lines/second)
Physical Source Lines of Code (SLOC) = 45
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/profiling/i386/profile-md.h:398:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 417 in 0.56 seconds (6597 lines/second)
Physical Source Lines of Code (SLOC) = 170
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 5.88235 [1+] 5.88235 [2+] 5.88235 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/profiling/i386/profile-md.c:925:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/profiling/i386/profile-md.c:926:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/profiling/i386/profile-md.c:936:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/profiling/i386/profile-md.c:1119:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/profiling/i386/profile-md.c:1123:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/profiling/i386/profile-md.c:1127:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/profiling/i386/profile-md.c:1131:  [2] (buffer) sprintf: Does not check for buffer overflows. Use snprintf or vsnprintf. Risk is low because the source has a constant maximum length.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/profiling/i386/profile-md.c:1115:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 8
Lines analyzed = 1244 in 0.63 seconds (9886 lines/second)
Physical Source Lines of Code (SLOC) = 757
Hits@level = [0]   0 [1]   1 [2]   7 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   8 [1+]   8 [2+]   7 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 10.568 [1+] 10.568 [2+] 9.24703 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/profiling/profile-mk.c:206:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/profiling/profile-mk.c:208:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 2
Lines analyzed = 231 in 0.54 seconds (5745 lines/second)
Physical Source Lines of Code (SLOC) = 148
Hits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 13.5135 [1+] 13.5135 [2+] 13.5135 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1309 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ipc/ipc_object.c:1054:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ipc/ipc_object.c:1062:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 2
Lines analyzed = 1125 in 0.59 seconds (12574 lines/second)
Physical Source Lines of Code (SLOC) = 616
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   1 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   1 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+] 3.24675 [1+] 3.24675 [2+] 3.24675 [3+] 1.62338 [4+] 1.62338 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 89 in 0.53 seconds (2551 lines/second)
Physical Source Lines of Code (SLOC) = 12
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 2350 in 0.65 seconds (15731 lines/second)
Physical Source Lines of Code (SLOC) = 1496
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 163 in 0.54 seconds (4408 lines/second)
Physical Source Lines of Code (SLOC) = 40
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 2050 in 0.64 seconds (15016 lines/second)
Physical Source Lines of Code (SLOC) = 1157
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 402 in 0.55 seconds (8025 lines/second)
Physical Source Lines of Code (SLOC) = 216
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ipc/ipc_entry.c:962:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ipc/ipc_entry.c:773:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 2
Lines analyzed = 986 in 0.58 seconds (12166 lines/second)
Physical Source Lines of Code (SLOC) = 529
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   1 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   1 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+] 3.78072 [1+] 3.78072 [2+] 3.78072 [3+] 1.89036 [4+] 1.89036 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 240 in 0.55 seconds (5317 lines/second)
Physical Source Lines of Code (SLOC) = 118
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 174 in 0.54 seconds (3936 lines/second)
Physical Source Lines of Code (SLOC) = 51
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 99 in 0.54 seconds (2457 lines/second)
Physical Source Lines of Code (SLOC) = 6
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 1187 in 0.59 seconds (12868 lines/second)
Physical Source Lines of Code (SLOC) = 642
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 239 in 0.54 seconds (5559 lines/second)
Physical Source Lines of Code (SLOC) = 113
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 236 in 0.54 seconds (5937 lines/second)
Physical Source Lines of Code (SLOC) = 103
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ipc/ipc_port.c:1308:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ipc/ipc_port.c:266:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 2
Lines analyzed = 1959 in 0.64 seconds (14281 lines/second)
Physical Source Lines of Code (SLOC) = 1218
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   1 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   1 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+] 1.64204 [1+] 1.64204 [2+] 1.64204 [3+] 0.821018 [4+] 0.821018 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 130 in 0.54 seconds (3523 lines/second)
Physical Source Lines of Code (SLOC) = 9
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 146 in 0.54 seconds (4017 lines/second)
Physical Source Lines of Code (SLOC) = 52
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 65 in 0.53 seconds (2076 lines/second)
Physical Source Lines of Code (SLOC) = 24
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ipc/mach_msg.c:209:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ipc/mach_msg.c:241:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ipc/mach_msg.c:616:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 3
Lines analyzed = 633 in 0.56 seconds (9919 lines/second)
Physical Source Lines of Code (SLOC) = 365
Hits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 8.21918 [1+] 8.21918 [2+] 8.21918 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 144 in 0.54 seconds (3968 lines/second)
Physical Source Lines of Code (SLOC) = 53
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ipc/ipc_pset.c:533:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 

Hits = 1
Lines analyzed = 577 in 0.56 seconds (9617 lines/second)
Physical Source Lines of Code (SLOC) = 289
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+] 3.46021 [1+] 3.46021 [2+] 3.46021 [3+] 3.46021 [4+] 3.46021 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 950 in 0.58 seconds (11513 lines/second)
Physical Source Lines of Code (SLOC) = 523
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 197 in 0.54 seconds (4695 lines/second)
Physical Source Lines of Code (SLOC) = 77
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 474 in 0.55 seconds (8625 lines/second)
Physical Source Lines of Code (SLOC) = 241
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 113 in 0.54 seconds (3061 lines/second)
Physical Source Lines of Code (SLOC) = 43
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 599 in 0.57 seconds (9103 lines/second)
Physical Source Lines of Code (SLOC) = 376
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ipc/ipc_kmsg.c:1276:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ipc/ipc_kmsg.c:1513:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 2
Lines analyzed = 4428 in 0.80 seconds (14944 lines/second)
Physical Source Lines of Code (SLOC) = 2820
Hits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 0.70922 [1+] 0.70922 [2+] 0.70922 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 694 in 0.57 seconds (10280 lines/second)
Physical Source Lines of Code (SLOC) = 345
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 215 in 0.54 seconds (5458 lines/second)
Physical Source Lines of Code (SLOC) = 110
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 279 in 0.54 seconds (6582 lines/second)
Physical Source Lines of Code (SLOC) = 130
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 141 in 0.54 seconds (3842 lines/second)
Physical Source Lines of Code (SLOC) = 47
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 87 in 0.53 seconds (2628 lines/second)
Physical Source Lines of Code (SLOC) = 36
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 243 in 0.54 seconds (5515 lines/second)
Physical Source Lines of Code (SLOC) = 119
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 396 in 0.55 seconds (7963 lines/second)
Physical Source Lines of Code (SLOC) = 188
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 97 in 0.53 seconds (2816 lines/second)
Physical Source Lines of Code (SLOC) = 17
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 340 in 0.55 seconds (6833 lines/second)
Physical Source Lines of Code (SLOC) = 157
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 125 in 0.54 seconds (3390 lines/second)
Physical Source Lines of Code (SLOC) = 39
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/ml/x86_64/kdp_machdep.c:52:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/ml/x86_64/kdp_machdep.c:105:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 2
Lines analyzed = 698 in 0.56 seconds (11585 lines/second)
Physical Source Lines of Code (SLOC) = 526
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   1 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   1 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+] 3.80228 [1+] 3.80228 [2+] 3.80228 [3+] 1.90114 [4+] 1.90114 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/ml/x86_64/kdp_vm.c:73:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/ml/x86_64/kdp_vm.c:193:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 2
Lines analyzed = 379 in 0.56 seconds (6838 lines/second)
Physical Source Lines of Code (SLOC) = 254
Hits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 7.87402 [1+] 7.87402 [2+] 7.87402 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/ml/ppc/kdp_machdep.c:83:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/ml/ppc/kdp_machdep.c:98:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/ml/ppc/kdp_machdep.c:118:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 3
Lines analyzed = 827 in 0.61 seconds (7443 lines/second)
Physical Source Lines of Code (SLOC) = 683
Hits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 4.39239 [1+] 4.39239 [2+] 4.39239 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/ml/ppc/kdp_vm.c:87:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/ml/ppc/kdp_vm.c:354:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 2
Lines analyzed = 570 in 0.56 seconds (8938 lines/second)
Physical Source Lines of Code (SLOC) = 390
Hits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 5.12821 [1+] 5.12821 [2+] 5.12821 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/ml/i386/kdp_machdep.c:52:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/ml/i386/kdp_machdep.c:105:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 2
Lines analyzed = 698 in 0.56 seconds (11659 lines/second)
Physical Source Lines of Code (SLOC) = 527
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   1 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   1 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+] 3.79507 [1+] 3.79507 [2+] 3.79507 [3+] 1.89753 [4+] 1.89753 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 374 in 0.55 seconds (7921 lines/second)
Physical Source Lines of Code (SLOC) = 258
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/ml/i386/kdp_vm.c:72:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/ml/i386/kdp_vm.c:191:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 2
Lines analyzed = 403 in 0.56 seconds (7276 lines/second)
Physical Source Lines of Code (SLOC) = 275
Hits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 7.27273 [1+] 7.27273 [2+] 7.27273 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 203 in 0.54 seconds (5769 lines/second)
Physical Source Lines of Code (SLOC) = 138
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_serial.c:35:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 108 in 0.53 seconds (3201 lines/second)
Physical Source Lines of Code (SLOC) = 72
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 13.8889 [1+] 13.8889 [2+] 13.8889 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp.c:165:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp.c:192:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp.c:947:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 3
Lines analyzed = 1280 in 0.59 seconds (13520 lines/second)
Physical Source Lines of Code (SLOC) = 965
Hits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 3.10881 [1+] 3.10881 [2+] 3.10881 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 177 in 0.54 seconds (4566 lines/second)
Physical Source Lines of Code (SLOC) = 120
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_core.h:58:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_core.h:60:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 2
Lines analyzed = 92 in 0.53 seconds (2731 lines/second)
Physical Source Lines of Code (SLOC) = 41
Hits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 48.7805 [1+] 48.7805 [2+] 48.7805 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 46 in 0.53 seconds (1488 lines/second)
Physical Source Lines of Code (SLOC) = 7
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 213 in 0.53 seconds (6226 lines/second)
Physical Source Lines of Code (SLOC) = 152
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_protocol.h:167:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_protocol.h:275:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_protocol.h:290:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_protocol.h:306:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_protocol.h:316:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_protocol.h:331:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_protocol.h:347:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_protocol.h:363:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_protocol.h:384:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_protocol.h:395:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_protocol.h:415:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_protocol.h:431:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_protocol.h:441:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_protocol.h:454:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_protocol.h:471:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_protocol.h:560:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 16
Lines analyzed = 647 in 0.56 seconds (11231 lines/second)
Physical Source Lines of Code (SLOC) = 382
Hits@level = [0]   0 [1]   0 [2]  16 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]  16 [1+]  16 [2+]  16 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 41.8848 [1+] 41.8848 [2+] 41.8848 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 51 in 0.53 seconds (1576 lines/second)
Physical Source Lines of Code (SLOC) = 6
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 41 in 0.53 seconds (1354 lines/second)
Physical Source Lines of Code (SLOC) = 7
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 49 in 0.53 seconds (1604 lines/second)
Physical Source Lines of Code (SLOC) = 11
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:193:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:85:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:96:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:161:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:162:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:363:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:405:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:421:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:422:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:434:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:450:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:473:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:488:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:489:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:501:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:576:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:638:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:639:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:642:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:643:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:645:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:646:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:650:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:651:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:653:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:708:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:709:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:783:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:787:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:859:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:1001:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:1231:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:1247:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:1248:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:1260:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:1282:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:1485:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:1515:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:1516:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:1671:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:1707:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:1220:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:1228:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:1277:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:1456:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:1493:  [1] (buffer) strncpy: Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:1544:  [1] (buffer) strncpy: Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers. Risk is low because the source is a constant string.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:1546:  [1] (buffer) strncpy: Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers. Risk is low because the source is a constant string.
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/kdp/kdp_udp.c:1550:  [1] (port) snprintf: On some very old systems, snprintf is incorrectly implemented and permits buffer overflows; there are also incompatible standard definitions of it. Check it during installation, or use something else. 

Hits = 49
Lines analyzed = 1737 in 0.65 seconds (11627 lines/second)
Physical Source Lines of Code (SLOC) = 1311
Hits@level = [0]   0 [1]   8 [2]  40 [3]   0 [4]   1 [5]   0
Hits@level+ = [0+]  49 [1+]  49 [2+]  41 [3+]   1 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+] 37.376 [1+] 37.376 [2+] 31.2738 [3+] 0.762777 [4+] 0.762777 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_dialog.c:79:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_dialog.c:97:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_dialog.c:186:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_dialog.c:884:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 4
Lines analyzed = 1004 in 0.59 seconds (10662 lines/second)
Physical Source Lines of Code (SLOC) = 650
Hits@level = [0]   0 [1]   1 [2]   3 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   4 [1+]   4 [2+]   3 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 6.15385 [1+] 6.15385 [2+] 4.61538 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/video_console.h:63:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 71 in 0.53 seconds (2250 lines/second)
Physical Source Lines of Code (SLOC) = 30
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 33.3333 [1+] 33.3333 [2+] 33.3333 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/rendered_numbers.c:6:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/rendered_numbers.c:28:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/rendered_numbers.c:50:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/rendered_numbers.c:72:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/rendered_numbers.c:94:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/rendered_numbers.c:116:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/rendered_numbers.c:138:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/rendered_numbers.c:160:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/rendered_numbers.c:182:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/rendered_numbers.c:204:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/rendered_numbers.c:226:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/rendered_numbers.c:248:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/rendered_numbers.c:270:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/rendered_numbers.c:292:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/rendered_numbers.c:314:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/rendered_numbers.c:336:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/rendered_numbers.c:358:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 17
Lines analyzed = 376 in 0.57 seconds (5072 lines/second)
Physical Source Lines of Code (SLOC) = 323
Hits@level = [0]   0 [1]   0 [2]  17 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]  17 [1+]  17 [2+]  17 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 52.6316 [1+] 52.6316 [2+] 52.6316 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/iso_font.c:47:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 309 in 0.64 seconds (2250 lines/second)
Physical Source Lines of Code (SLOC) = 262
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 3.81679 [1+] 3.81679 [2+] 3.81679 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/serial_protos.h:56:  [1] (buffer) getc: Check buffer boundaries if used in a loop. 

Hits = 1
Lines analyzed = 62 in 0.53 seconds (1970 lines/second)
Physical Source Lines of Code (SLOC) = 21
Hits@level = [0]   0 [1]   1 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 47.619 [1+] 47.619 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_image.c:12:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 2702 in 1.56 seconds (2541 lines/second)
Physical Source Lines of Code (SLOC) = 2682
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 0.372856 [1+] 0.372856 [2+] 0.372856 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/ppc/serial_console.c:75:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/ppc/serial_console.c:305:  [1] (buffer) getc: Check buffer boundaries if used in a loop. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/ppc/serial_console.c:312:  [1] (buffer) getc: Check buffer boundaries if used in a loop. 

Hits = 3
Lines analyzed = 329 in 0.55 seconds (6454 lines/second)
Physical Source Lines of Code (SLOC) = 227
Hits@level = [0]   0 [1]   2 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 13.2159 [1+] 13.2159 [2+] 4.40529 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/video_console.c:229:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/video_console.c:1267:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/video_console.c:1300:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/video_console.c:1779:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/video_console.c:1786:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/video_console.c:1796:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 6
Lines analyzed = 2673 in 0.68 seconds (14807 lines/second)
Physical Source Lines of Code (SLOC) = 2182
Hits@level = [0]   0 [1]   0 [2]   6 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   6 [1+]   6 [2+]   6 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 2.74977 [1+] 2.74977 [2+] 2.74977 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 51 in 0.53 seconds (1550 lines/second)
Physical Source Lines of Code (SLOC) = 34
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/genimage.c:76:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/genimage.c:171:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/genimage.c:186:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/genimage.c:225:  [2] (integer) atoi: Unless checked, the resulting number can exceed the expected range.  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/genimage.c:311:  [2] (misc) fopen: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/genimage.c:413:  [2] (misc) fopen: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/genimage.c:520:  [2] (misc) fopen: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/genimage.c:563:  [2] (misc) fopen: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/genimage.c:590:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/genimage.c:606:  [2] (misc) fopen: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/genimage.c:709:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/genimage.c:1425:  [2] (misc) fopen: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/genimage.c:1448:  [2] (misc) fopen: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/genimage.c:1550:  [2] (misc) fopen: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/genimage.c:1590:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/genimage.c:1593:  [2] (misc) fopen: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 

Hits = 16
Lines analyzed = 1621 in 0.66 seconds (10009 lines/second)
Physical Source Lines of Code (SLOC) = 1261
Hits@level = [0]   0 [1]   0 [2]  16 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]  16 [1+]  16 [2+]  16 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 12.6883 [1+] 12.6883 [2+] 12.6883 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/qtif2kraw.c:32:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/qtif2kraw.c:81:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/qtif2kraw.c:95:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/qtif2kraw.c:128:  [2] (integer) atoi: Unless checked, the resulting number can exceed the expected range.  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/qtif2kraw.c:172:  [2] (misc) fopen: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/qtif2kraw.c:269:  [2] (misc) fopen: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/qtif2kraw.c:296:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/qtif2kraw.c:321:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/qtif2kraw.c:879:  [2] (misc) fopen: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 

Hits = 9
Lines analyzed = 892 in 0.59 seconds (9422 lines/second)
Physical Source Lines of Code (SLOC) = 682
Hits@level = [0]   0 [1]   0 [2]   9 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   9 [1+]   9 [2+]   9 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 13.1965 [1+] 13.1965 [2+] 13.1965 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/setupdialog.c:37:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/setupdialog.c:78:  [2] (misc) fopen: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/setupdialog.c:92:  [2] (misc) fopen: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/setupdialog.c:152:  [2] (misc) fopen: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/setupdialog.c:283:  [2] (misc) fopen: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/setupdialog.c:124:  [1] (buffer) fgetc: Check buffer boundaries if used in a loop. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/setupdialog.c:251:  [1] (buffer) fgetc: Check buffer boundaries if used in a loop. 

Hits = 7
Lines analyzed = 359 in 0.56 seconds (5624 lines/second)
Physical Source Lines of Code (SLOC) = 260
Hits@level = [0]   0 [1]   2 [2]   5 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   7 [1+]   7 [2+]   5 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 26.9231 [1+] 26.9231 [2+] 19.2308 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/generated_files/rendered_numbers.c:6:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/generated_files/rendered_numbers.c:28:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/generated_files/rendered_numbers.c:50:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/generated_files/rendered_numbers.c:72:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/generated_files/rendered_numbers.c:94:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/generated_files/rendered_numbers.c:116:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/generated_files/rendered_numbers.c:138:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/generated_files/rendered_numbers.c:160:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/generated_files/rendered_numbers.c:182:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/generated_files/rendered_numbers.c:204:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/generated_files/rendered_numbers.c:226:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/generated_files/rendered_numbers.c:248:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/generated_files/rendered_numbers.c:270:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/generated_files/rendered_numbers.c:292:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/generated_files/rendered_numbers.c:314:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/generated_files/rendered_numbers.c:336:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/generated_files/rendered_numbers.c:358:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 17
Lines analyzed = 376 in 0.57 seconds (5060 lines/second)
Physical Source Lines of Code (SLOC) = 323
Hits@level = [0]   0 [1]   0 [2]  17 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]  17 [1+]  17 [2+]  17 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 52.6316 [1+] 52.6316 [2+] 52.6316 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/panic_ui/generated_files/panic_image.c:7:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 1953 in 1.38 seconds (2218 lines/second)
Physical Source Lines of Code (SLOC) = 1951
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 0.512558 [1+] 0.512558 [2+] 0.512558 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/progress_meter_data.c:33:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/progress_meter_data.c:78:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/progress_meter_data.c:121:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 3
Lines analyzed = 163 in 0.55 seconds (3316 lines/second)
Physical Source Lines of Code (SLOC) = 130
Hits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 23.0769 [1+] 23.0769 [2+] 23.0769 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/i386/serial_console.c:58:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/i386/serial_console.c:343:  [1] (buffer) getc: Check buffer boundaries if used in a loop. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/i386/serial_console.c:350:  [1] (buffer) getc: Check buffer boundaries if used in a loop. 

Hits = 3
Lines analyzed = 366 in 0.55 seconds (7544 lines/second)
Physical Source Lines of Code (SLOC) = 255
Hits@level = [0]   0 [1]   2 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 11.7647 [1+] 11.7647 [2+] 3.92157 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/i386/video_scroll.c:32:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/i386/video_scroll.c:38:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/console/i386/video_scroll.c:45:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 3
Lines analyzed = 46 in 0.53 seconds (1475 lines/second)
Physical Source Lines of Code (SLOC) = 15
Hits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 200 [1+] 200 [2+] 200 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 134 in 0.54 seconds (3821 lines/second)
Physical Source Lines of Code (SLOC) = 74
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 93 in 0.53 seconds (2717 lines/second)
Physical Source Lines of Code (SLOC) = 24
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 96 in 0.53 seconds (2784 lines/second)
Physical Source Lines of Code (SLOC) = 22
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 67 in 0.53 seconds (2068 lines/second)
Physical Source Lines of Code (SLOC) = 9
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 112 in 0.53 seconds (3338 lines/second)
Physical Source Lines of Code (SLOC) = 48
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 153 in 0.54 seconds (3655 lines/second)
Physical Source Lines of Code (SLOC) = 30
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 72 in 0.53 seconds (2236 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_expr.c:388:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 482 in 0.55 seconds (9056 lines/second)
Physical Source Lines of Code (SLOC) = 369
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 2.71003 [1+] 2.71003 [2+] 2.71003 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 149 in 0.54 seconds (3991 lines/second)
Physical Source Lines of Code (SLOC) = 65
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_sym.c:188:  [4] (buffer) strcpy: Does not check for buffer overflows when copying to destination. Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_sym.c:1332:  [4] (buffer) strcpy: Does not check for buffer overflows when copying to destination. Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_sym.c:214:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_sym.c:351:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_sym.c:453:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_sym.c:510:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_sym.c:565:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_sym.c:1334:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_sym.c:348:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_sym.c:537:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 10
Lines analyzed = 1502 in 0.62 seconds (12707 lines/second)
Physical Source Lines of Code (SLOC) = 1103
Hits@level = [0]   0 [1]   2 [2]   6 [3]   0 [4]   2 [5]   0
Hits@level+ = [0+]  10 [1+]  10 [2+]   8 [3+]   2 [4+]   2 [5+]   0
Hits/KSLOC@level+ = [0+] 9.06618 [1+] 9.06618 [2+] 7.25295 [3+] 1.81324 [4+] 1.81324 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 112 in 0.53 seconds (3281 lines/second)
Physical Source Lines of Code (SLOC) = 32
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 82 in 0.53 seconds (2462 lines/second)
Physical Source Lines of Code (SLOC) = 12
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 256 in 0.55 seconds (5501 lines/second)
Physical Source Lines of Code (SLOC) = 62
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 87 in 0.53 seconds (2493 lines/second)
Physical Source Lines of Code (SLOC) = 15
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 114 in 0.54 seconds (3226 lines/second)
Physical Source Lines of Code (SLOC) = 28
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:1587:  [4] (format) fprintf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:1590:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:1765:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:1775:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:1912:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:1914:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:1935:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:1986:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:1997:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:2227:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:2239:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:2260:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:2269:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:2376:  [4] (buffer) strcpy: Does not check for buffer overflows when copying to destination. Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:423:  [2] (misc) fopen: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:433:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:1581:  [2] (misc) fopen: Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:443:  [1] (buffer) getc: Check buffer boundaries if used in a loop. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:451:  [1] (buffer) getc: Check buffer boundaries if used in a loop. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:459:  [1] (buffer) getc: Check buffer boundaries if used in a loop. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:473:  [1] (buffer) getc: Check buffer boundaries if used in a loop. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:484:  [1] (buffer) getc: Check buffer boundaries if used in a loop. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:503:  [1] (buffer) getc: Check buffer boundaries if used in a loop. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:516:  [1] (buffer) getc: Check buffer boundaries if used in a loop. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:532:  [1] (buffer) getc: Check buffer boundaries if used in a loop. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:585:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:586:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:606:  [1] (buffer) getc: Check buffer boundaries if used in a loop. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:793:  [1] (buffer) getc: Check buffer boundaries if used in a loop. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:810:  [1] (buffer) getc: Check buffer boundaries if used in a loop. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:855:  [1] (buffer) getc: Check buffer boundaries if used in a loop. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:865:  [1] (buffer) getc: Check buffer boundaries if used in a loop. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:868:  [1] (buffer) getc: Check buffer boundaries if used in a loop. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:1747:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:1754:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/makedis.c:2375:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 36
Lines analyzed = 2385 in 0.73 seconds (10529 lines/second)
Physical Source Lines of Code (SLOC) = 1716
Hits@level = [0]   0 [1]  19 [2]   3 [3]   0 [4]  14 [5]   0
Hits@level+ = [0+]  36 [1+]  36 [2+]  17 [3+]  14 [4+]  14 [5+]   0
Hits/KSLOC@level+ = [0+] 20.979 [1+] 20.979 [2+] 9.90676 [3+] 8.15851 [4+] 8.15851 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_aout.c:175:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_aout.c:176:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_aout.c:387:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_aout.c:537:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_aout.c:544:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 5
Lines analyzed = 961 in 0.59 seconds (11105 lines/second)
Physical Source Lines of Code (SLOC) = 726
Hits@level = [0]   0 [1]   3 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   5 [1+]   5 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 6.88705 [1+] 6.88705 [2+] 2.75482 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_input.c:223:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_input.c:230:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_input.c:451:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 3
Lines analyzed = 821 in 0.57 seconds (11001 lines/second)
Physical Source Lines of Code (SLOC) = 547
Hits@level = [0]   0 [1]   1 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 5.48446 [1+] 5.48446 [2+] 3.65631 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 91 in 0.53 seconds (2810 lines/second)
Physical Source Lines of Code (SLOC) = 45
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 132 in 0.54 seconds (3621 lines/second)
Physical Source Lines of Code (SLOC) = 53
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 141 in 0.54 seconds (3581 lines/second)
Physical Source Lines of Code (SLOC) = 25
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 72 in 0.53 seconds (2285 lines/second)
Physical Source Lines of Code (SLOC) = 9
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_lex.c:161:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_lex.c:162:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_lex.c:283:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_lex.c:184:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_lex.c:187:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 5
Lines analyzed = 575 in 0.58 seconds (7587 lines/second)
Physical Source Lines of Code (SLOC) = 388
Hits@level = [0]   0 [1]   2 [2]   3 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   5 [1+]   5 [2+]   3 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 12.8866 [1+] 12.8866 [2+] 7.73196 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 118 in 0.54 seconds (2924 lines/second)
Physical Source Lines of Code (SLOC) = 38
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 345 in 0.55 seconds (7606 lines/second)
Physical Source Lines of Code (SLOC) = 203
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 337 in 0.58 seconds (4130 lines/second)
Physical Source Lines of Code (SLOC) = 206
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_macro.c:78:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_macro.c:79:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 2
Lines analyzed = 227 in 0.54 seconds (5330 lines/second)
Physical Source Lines of Code (SLOC) = 138
Hits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 14.4928 [1+] 14.4928 [2+] 14.4928 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_variables.c:200:  [4] (buffer) strcpy: Does not check for buffer overflows when copying to destination. Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_variables.c:454:  [4] (buffer) strcpy: Does not check for buffer overflows when copying to destination. Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_variables.c:248:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_variables.c:376:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_variables.c:310:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_variables.c:327:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_variables.c:492:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_variables.c:497:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_variables.c:614:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_variables.c:645:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 10
Lines analyzed = 716 in 0.57 seconds (9857 lines/second)
Physical Source Lines of Code (SLOC) = 595
Hits@level = [0]   0 [1]   6 [2]   2 [3]   0 [4]   2 [5]   0
Hits@level+ = [0+]  10 [1+]  10 [2+]   4 [3+]   2 [4+]   2 [5+]   0
Hits/KSLOC@level+ = [0+] 16.8067 [1+] 16.8067 [2+] 6.72269 [3+] 3.36134 [4+] 3.36134 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_sym.h:87:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 354 in 0.55 seconds (6809 lines/second)
Physical Source Lines of Code (SLOC) = 211
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 4.73934 [1+] 4.73934 [2+] 4.73934 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 203 in 0.58 seconds (2681 lines/second)
Physical Source Lines of Code (SLOC) = 77
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_command.c:257:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_command.c:839:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_command.c:211:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_command.c:228:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_command.c:236:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_command.c:238:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 6
Lines analyzed = 1000 in 0.57 seconds (13571 lines/second)
Physical Source Lines of Code (SLOC) = 820
Hits@level = [0]   0 [1]   4 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   6 [1+]   6 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 7.31707 [1+] 7.31707 [2+] 2.43902 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/orig/db_print.c:607:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/orig/db_print.c:608:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/orig/db_print.c:492:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 3
Lines analyzed = 1373 in 0.61 seconds (12456 lines/second)
Physical Source Lines of Code (SLOC) = 894
Hits@level = [0]   0 [1]   1 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 3.3557 [1+] 3.3557 [2+] 2.23714 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 244 in 0.55 seconds (5401 lines/second)
Physical Source Lines of Code (SLOC) = 65
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 541 in 0.56 seconds (9479 lines/second)
Physical Source Lines of Code (SLOC) = 334
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_cond.c:137:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 274 in 0.55 seconds (5755 lines/second)
Physical Source Lines of Code (SLOC) = 120
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 8.33333 [1+] 8.33333 [2+] 8.33333 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_lex.h:160:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 220 in 0.54 seconds (5032 lines/second)
Physical Source Lines of Code (SLOC) = 59
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 16.9492 [1+] 16.9492 [2+] 16.9492 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_print.c:261:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_print.c:262:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_print.c:183:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 3
Lines analyzed = 931 in 0.58 seconds (11721 lines/second)
Physical Source Lines of Code (SLOC) = 758
Hits@level = [0]   0 [1]   1 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 3.95778 [1+] 3.95778 [2+] 2.63852 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 67 in 0.53 seconds (2093 lines/second)
Physical Source Lines of Code (SLOC) = 7
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 816 in 0.57 seconds (10898 lines/second)
Physical Source Lines of Code (SLOC) = 687
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 160 in 0.54 seconds (4041 lines/second)
Physical Source Lines of Code (SLOC) = 21
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 77 in 0.53 seconds (2365 lines/second)
Physical Source Lines of Code (SLOC) = 14
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_access.c:85:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_access.c:120:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 2
Lines analyzed = 152 in 0.54 seconds (4127 lines/second)
Physical Source Lines of Code (SLOC) = 70
Hits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 28.5714 [1+] 28.5714 [2+] 28.5714 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 366 in 0.57 seconds (5269 lines/second)
Physical Source Lines of Code (SLOC) = 240
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 122 in 0.54 seconds (3029 lines/second)
Physical Source Lines of Code (SLOC) = 41
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_examine.c:81:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/ddb/db_examine.c:709:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 2
Lines analyzed = 747 in 0.57 seconds (10841 lines/second)
Physical Source Lines of Code (SLOC) = 628
Hits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 3.18471 [1+] 3.18471 [2+] 3.18471 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 427 in 0.55 seconds (9293 lines/second)
Physical Source Lines of Code (SLOC) = 320
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/bsd_vm.c:193:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 

Hits = 1
Lines analyzed = 1414 in 0.59 seconds (15466 lines/second)
Physical Source Lines of Code (SLOC) = 909
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+] 1.10011 [1+] 1.10011 [2+] 1.10011 [3+] 1.10011 [4+] 1.10011 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_shared_region.h:67:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 

Hits = 1
Lines analyzed = 166 in 0.53 seconds (4853 lines/second)
Physical Source Lines of Code (SLOC) = 118
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+] 8.47458 [1+] 8.47458 [2+] 8.47458 [3+] 8.47458 [4+] 8.47458 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:1078:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:1090:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:1093:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:1095:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:1117:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:1129:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:1134:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:1136:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:1797:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:1842:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:1847:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:1850:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:1853:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:1856:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:1860:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:1936:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:1958:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:2388:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:2389:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:2565:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_user.c:2582:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 

Hits = 21
Lines analyzed = 3229 in 0.69 seconds (16868 lines/second)
Physical Source Lines of Code (SLOC) = 2149
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]  21 [5]   0
Hits@level+ = [0+]  21 [1+]  21 [2+]  21 [3+]  21 [4+]  21 [5+]   0
Hits/KSLOC@level+ = [0+] 9.77199 [1+] 9.77199 [2+] 9.77199 [3+] 9.77199 [4+] 9.77199 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 34 in 0.53 seconds (1151 lines/second)
Physical Source Lines of Code (SLOC) = 4
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_resident.c:4723:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 

Hits = 1
Lines analyzed = 4777 in 0.81 seconds (15422 lines/second)
Physical Source Lines of Code (SLOC) = 2995
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+] 0.33389 [1+] 0.33389 [2+] 0.33389 [3+] 0.33389 [4+] 0.33389 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 45 in 0.53 seconds (1483 lines/second)
Physical Source Lines of Code (SLOC) = 11
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 899 in 0.57 seconds (12175 lines/second)
Physical Source Lines of Code (SLOC) = 566
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_page.h:382:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 827 in 0.58 seconds (10360 lines/second)
Physical Source Lines of Code (SLOC) = 471
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 2.12314 [1+] 2.12314 [2+] 2.12314 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 4806 in 0.82 seconds (14862 lines/second)
Physical Source Lines of Code (SLOC) = 2536
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_pageout.c:7443:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_pageout.c:116:  [3] (random) random: This function is not sufficiently random for security-related functions such as key and nonce creation. use a more secure technique for acquiring random values. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_pageout.c:6435:  [3] (random) random: This function is not sufficiently random for security-related functions such as key and nonce creation. use a more secure technique for acquiring random values. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_pageout.c:6406:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_pageout.c:6410:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_pageout.c:6411:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_pageout.c:6412:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_pageout.c:6521:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_pageout.c:6659:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_pageout.c:7083:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 10
Lines analyzed = 7511 in 0.97 seconds (16049 lines/second)
Physical Source Lines of Code (SLOC) = 4628
Hits@level = [0]   0 [1]   0 [2]   7 [3]   2 [4]   1 [5]   0
Hits@level+ = [0+]  10 [1+]  10 [2+]  10 [3+]   3 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+] 2.16076 [1+] 2.16076 [2+] 2.16076 [3+] 0.648228 [4+] 0.216076 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 187 in 0.54 seconds (4741 lines/second)
Physical Source Lines of Code (SLOC) = 78
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 175 in 0.54 seconds (4807 lines/second)
Physical Source Lines of Code (SLOC) = 86
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_kern.c:977:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_kern.c:1013:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 2
Lines analyzed = 1138 in 0.59 seconds (12007 lines/second)
Physical Source Lines of Code (SLOC) = 702
Hits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 2.849 [1+] 2.849 [2+] 2.849 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 2295 in 0.64 seconds (16291 lines/second)
Physical Source Lines of Code (SLOC) = 1433
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 69 in 0.53 seconds (2190 lines/second)
Physical Source Lines of Code (SLOC) = 15
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1291 lines/second)
Physical Source Lines of Code (SLOC) = 6
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 556 in 0.56 seconds (9882 lines/second)
Physical Source Lines of Code (SLOC) = 413
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 673 in 0.56 seconds (10729 lines/second)
Physical Source Lines of Code (SLOC) = 452
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_apple_protect.c:149:  [4] (crypto) crypt: Function crypt is a poor one-way hashing algorithm; since it only accepts passwords of 8 characters or less, and only a two-byte salt, it is excessively vulnerable to dictionary attacks given today's faster computing equipment. Use a different algorithm, such as SHA-1, with a larger non-repeating salt. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_apple_protect.c:202:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_apple_protect.c:534:  [4] (crypto) crypt: Function crypt is a poor one-way hashing algorithm; since it only accepts passwords of 8 characters or less, and only a two-byte salt, it is excessively vulnerable to dictionary attacks given today's faster computing equipment. Use a different algorithm, such as SHA-1, with a larger non-repeating salt. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_apple_protect.c:537:  [4] (crypto) crypt: Function crypt is a poor one-way hashing algorithm; since it only accepts passwords of 8 characters or less, and only a two-byte salt, it is excessively vulnerable to dictionary attacks given today's faster computing equipment. Use a different algorithm, such as SHA-1, with a larger non-repeating salt. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_apple_protect.c:732:  [4] (crypto) crypt: Function crypt is a poor one-way hashing algorithm; since it only accepts passwords of 8 characters or less, and only a two-byte salt, it is excessively vulnerable to dictionary attacks given today's faster computing equipment. Use a different algorithm, such as SHA-1, with a larger non-repeating salt. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_apple_protect.c:733:  [4] (crypto) crypt: Function crypt is a poor one-way hashing algorithm; since it only accepts passwords of 8 characters or less, and only a two-byte salt, it is excessively vulnerable to dictionary attacks given today's faster computing equipment. Use a different algorithm, such as SHA-1, with a larger non-repeating salt. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_apple_protect.c:733:  [4] (crypto) crypt: Function crypt is a poor one-way hashing algorithm; since it only accepts passwords of 8 characters or less, and only a two-byte salt, it is excessively vulnerable to dictionary attacks given today's faster computing equipment. Use a different algorithm, such as SHA-1, with a larger non-repeating salt. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_apple_protect.c:1054:  [4] (crypto) crypt: Function crypt is a poor one-way hashing algorithm; since it only accepts passwords of 8 characters or less, and only a two-byte salt, it is excessively vulnerable to dictionary attacks given today's faster computing equipment. Use a different algorithm, such as SHA-1, with a larger non-repeating salt. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_apple_protect.c:1055:  [4] (crypto) crypt: Function crypt is a poor one-way hashing algorithm; since it only accepts passwords of 8 characters or less, and only a two-byte salt, it is excessively vulnerable to dictionary attacks given today's faster computing equipment. Use a different algorithm, such as SHA-1, with a larger non-repeating salt. 

Hits = 9
Lines analyzed = 1163 in 0.59 seconds (13185 lines/second)
Physical Source Lines of Code (SLOC) = 744
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   9 [5]   0
Hits@level+ = [0+]   9 [1+]   9 [2+]   9 [3+]   9 [4+]   9 [5+]   0
Hits/KSLOC@level+ = [0+] 12.0968 [1+] 12.0968 [2+] 12.0968 [3+] 12.0968 [4+] 12.0968 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_object.c:5198:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 

Hits = 1
Lines analyzed = 7405 in 0.97 seconds (15682 lines/second)
Physical Source Lines of Code (SLOC) = 4138
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+] 0.241663 [1+] 0.241663 [2+] 0.241663 [3+] 0.241663 [4+] 0.241663 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 69 in 0.53 seconds (2256 lines/second)
Physical Source Lines of Code (SLOC) = 26
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 483 in 0.56 seconds (8411 lines/second)
Physical Source Lines of Code (SLOC) = 248
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 398 in 0.55 seconds (8620 lines/second)
Physical Source Lines of Code (SLOC) = 251
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 783 in 0.57 seconds (10472 lines/second)
Physical Source Lines of Code (SLOC) = 511
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 117 in 0.54 seconds (3335 lines/second)
Physical Source Lines of Code (SLOC) = 45
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 465 in 0.54 seconds (10408 lines/second)
Physical Source Lines of Code (SLOC) = 295
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_swapfile_pager.c:190:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 

Hits = 1
Lines analyzed = 876 in 0.58 seconds (11560 lines/second)
Physical Source Lines of Code (SLOC) = 525
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+] 1.90476 [1+] 1.90476 [2+] 1.90476 [3+] 1.90476 [4+] 1.90476 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_map.c:2374:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_map.c:10448:  [4] (format) printf: If format strings can be influenced by an attacker, they can be exploited. Use a constant for the format specification. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_map.c:10521:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_map.c:10523:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 4
Lines analyzed = 12549 in 1.22 seconds (17367 lines/second)
Physical Source Lines of Code (SLOC) = 7593
Hits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   2 [5]   0
Hits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   2 [4+]   2 [5+]   0
Hits/KSLOC@level+ = [0+] 0.526801 [1+] 0.526801 [2+] 0.526801 [3+] 0.263401 [4+] 0.263401 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 1031 in 0.59 seconds (11991 lines/second)
Physical Source Lines of Code (SLOC) = 594
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 144 in 0.54 seconds (4074 lines/second)
Physical Source Lines of Code (SLOC) = 63
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 1486 in 0.61 seconds (12937 lines/second)
Physical Source Lines of Code (SLOC) = 986
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 146 in 0.54 seconds (3971 lines/second)
Physical Source Lines of Code (SLOC) = 41
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/vm/vm_external.c:210:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 1
Lines analyzed = 292 in 0.55 seconds (5865 lines/second)
Physical Source Lines of Code (SLOC) = 144
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 6.94444 [1+] 6.94444 [2+] 6.94444 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 172 in 0.54 seconds (4562 lines/second)
Physical Source Lines of Code (SLOC) = 78
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 101 in 0.53 seconds (2921 lines/second)
Physical Source Lines of Code (SLOC) = 29
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 133 in 0.54 seconds (3664 lines/second)
Physical Source Lines of Code (SLOC) = 68
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 79 in 0.53 seconds (2531 lines/second)
Physical Source Lines of Code (SLOC) = 35
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 832 in 0.58 seconds (10460 lines/second)
Physical Source Lines of Code (SLOC) = 502
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 167 in 0.54 seconds (4684 lines/second)
Physical Source Lines of Code (SLOC) = 101
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/user_ldt.c:235:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/user_ldt.c:194:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/user_ldt.c:350:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/user_ldt.c:389:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 4
Lines analyzed = 398 in 0.55 seconds (7784 lines/second)
Physical Source Lines of Code (SLOC) = 224
Hits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   1 [5]   0
Hits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   1 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+] 17.8571 [1+] 17.8571 [2+] 17.8571 [3+] 4.46429 [4+] 4.46429 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/hibernate_i386.c:111:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 1
Lines analyzed = 264 in 0.55 seconds (5796 lines/second)
Physical Source Lines of Code (SLOC) = 190
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 5.26316 [1+] 5.26316 [2+] 5.26316 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 356 in 0.55 seconds (6775 lines/second)
Physical Source Lines of Code (SLOC) = 256
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 257 in 0.54 seconds (6011 lines/second)
Physical Source Lines of Code (SLOC) = 164
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 62 in 0.53 seconds (1865 lines/second)
Physical Source Lines of Code (SLOC) = 5
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 82 in 0.53 seconds (2365 lines/second)
Physical Source Lines of Code (SLOC) = 12
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 1269 in 0.60 seconds (13204 lines/second)
Physical Source Lines of Code (SLOC) = 840
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 91 in 0.53 seconds (2732 lines/second)
Physical Source Lines of Code (SLOC) = 42
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 691 in 0.56 seconds (11681 lines/second)
Physical Source Lines of Code (SLOC) = 459
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 79 in 0.53 seconds (2417 lines/second)
Physical Source Lines of Code (SLOC) = 32
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 695 in 0.57 seconds (10355 lines/second)
Physical Source Lines of Code (SLOC) = 445
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 267 in 0.54 seconds (6891 lines/second)
Physical Source Lines of Code (SLOC) = 181
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 212 in 0.54 seconds (5471 lines/second)
Physical Source Lines of Code (SLOC) = 151
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/cpuid.c:447:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/cpuid.c:452:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/cpuid.c:453:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/cpuid.c:454:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/cpuid.c:468:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/cpuid.c:470:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/cpuid.c:472:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/cpuid.c:722:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/cpuid.c:744:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/cpuid.c:756:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/cpuid.c:776:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/cpuid.c:814:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/cpuid.c:481:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/cpuid.c:614:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/cpuid.c:719:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/cpuid.c:741:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 16
Lines analyzed = 884 in 0.59 seconds (9472 lines/second)
Physical Source Lines of Code (SLOC) = 668
Hits@level = [0]   0 [1]   4 [2]  12 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]  16 [1+]  16 [2+]  12 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 23.9521 [1+] 23.9521 [2+] 17.9641 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/seg.h:126:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/seg.h:146:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/seg.h:181:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/seg.h:189:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 

Hits = 4
Lines analyzed = 373 in 0.55 seconds (7050 lines/second)
Physical Source Lines of Code (SLOC) = 222
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   4 [5]   0
Hits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   4 [4+]   4 [5+]   0
Hits/KSLOC@level+ = [0+] 18.018 [1+] 18.018 [2+] 18.018 [3+] 18.018 [4+] 18.018 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 117 in 0.53 seconds (3466 lines/second)
Physical Source Lines of Code (SLOC) = 64
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 100 in 0.54 seconds (2610 lines/second)
Physical Source Lines of Code (SLOC) = 26
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 78 in 0.53 seconds (2288 lines/second)
Physical Source Lines of Code (SLOC) = 35
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 250 in 0.54 seconds (5956 lines/second)
Physical Source Lines of Code (SLOC) = 160
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 67 in 0.53 seconds (2038 lines/second)
Physical Source Lines of Code (SLOC) = 3
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 233 in 0.54 seconds (6046 lines/second)
Physical Source Lines of Code (SLOC) = 131
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 96 in 0.54 seconds (2688 lines/second)
Physical Source Lines of Code (SLOC) = 41
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 58 in 0.53 seconds (1882 lines/second)
Physical Source Lines of Code (SLOC) = 27
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 162 in 0.53 seconds (4683 lines/second)
Physical Source Lines of Code (SLOC) = 108
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 40 in 0.53 seconds (1329 lines/second)
Physical Source Lines of Code (SLOC) = 9
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 382 in 0.56 seconds (6940 lines/second)
Physical Source Lines of Code (SLOC) = 214
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 547 in 0.56 seconds (8924 lines/second)
Physical Source Lines of Code (SLOC) = 318
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 211 in 0.54 seconds (5032 lines/second)
Physical Source Lines of Code (SLOC) = 118
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 110 in 0.54 seconds (2752 lines/second)
Physical Source Lines of Code (SLOC) = 47
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 76 in 0.53 seconds (2426 lines/second)
Physical Source Lines of Code (SLOC) = 34
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 224 in 0.54 seconds (5827 lines/second)
Physical Source Lines of Code (SLOC) = 163
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 70 in 0.54 seconds (1788 lines/second)
Physical Source Lines of Code (SLOC) = 27
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/loose_ends.c:160:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/loose_ends.c:482:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 2
Lines analyzed = 1225 in 0.60 seconds (12355 lines/second)
Physical Source Lines of Code (SLOC) = 776
Hits@level = [0]   0 [1]   1 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 2.57732 [1+] 2.57732 [2+] 1.28866 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 172 in 0.54 seconds (4354 lines/second)
Physical Source Lines of Code (SLOC) = 79
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 112 in 0.54 seconds (2962 lines/second)
Physical Source Lines of Code (SLOC) = 22
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 59 in 0.53 seconds (1909 lines/second)
Physical Source Lines of Code (SLOC) = 24
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 295 in 0.55 seconds (6421 lines/second)
Physical Source Lines of Code (SLOC) = 206
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 66 in 0.53 seconds (2124 lines/second)
Physical Source Lines of Code (SLOC) = 23
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 69 in 0.53 seconds (2082 lines/second)
Physical Source Lines of Code (SLOC) = 4
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 52 in 0.53 seconds (1728 lines/second)
Physical Source Lines of Code (SLOC) = 16
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/db_interface.c:441:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 1
Lines analyzed = 1025 in 0.58 seconds (12799 lines/second)
Physical Source Lines of Code (SLOC) = 745
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 1.34228 [1+] 1.34228 [2+] 1.34228 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 98 in 0.53 seconds (2852 lines/second)
Physical Source Lines of Code (SLOC) = 26
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 304 in 0.54 seconds (7417 lines/second)
Physical Source Lines of Code (SLOC) = 165
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 69 in 0.53 seconds (2123 lines/second)
Physical Source Lines of Code (SLOC) = 3
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 83 in 0.53 seconds (2550 lines/second)
Physical Source Lines of Code (SLOC) = 44
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 67 in 0.53 seconds (2063 lines/second)
Physical Source Lines of Code (SLOC) = 3
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 74 in 0.53 seconds (2264 lines/second)
Physical Source Lines of Code (SLOC) = 31
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 308 in 0.55 seconds (6002 lines/second)
Physical Source Lines of Code (SLOC) = 189
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/pcb.c:526:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/pcb.c:527:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/pcb.c:575:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/pcb.c:576:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/pcb.c:694:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/pcb.c:695:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/pcb.c:733:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/pcb.c:734:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 

Hits = 8
Lines analyzed = 2649 in 0.68 seconds (14866 lines/second)
Physical Source Lines of Code (SLOC) = 1697
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   8 [5]   0
Hits@level+ = [0+]   8 [1+]   8 [2+]   8 [3+]   8 [4+]   8 [5+]   0
Hits/KSLOC@level+ = [0+] 4.7142 [1+] 4.7142 [2+] 4.7142 [3+] 4.7142 [4+] 4.7142 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 86 in 0.53 seconds (2578 lines/second)
Physical Source Lines of Code (SLOC) = 9
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 1122 in 0.60 seconds (11138 lines/second)
Physical Source Lines of Code (SLOC) = 695
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 333 in 0.55 seconds (7063 lines/second)
Physical Source Lines of Code (SLOC) = 193
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 169 in 0.54 seconds (4270 lines/second)
Physical Source Lines of Code (SLOC) = 77
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 189 in 0.55 seconds (3807 lines/second)
Physical Source Lines of Code (SLOC) = 187
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/commpage/commpage.c:274:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/commpage/commpage.c:376:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 2
Lines analyzed = 649 in 0.56 seconds (10206 lines/second)
Physical Source Lines of Code (SLOC) = 430
Hits@level = [0]   0 [1]   1 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 4.65116 [1+] 4.65116 [2+] 2.32558 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 311 in 0.55 seconds (5815 lines/second)
Physical Source Lines of Code (SLOC) = 194
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 48 in 0.53 seconds (1540 lines/second)
Physical Source Lines of Code (SLOC) = 16
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 391 in 0.57 seconds (5561 lines/second)
Physical Source Lines of Code (SLOC) = 245
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 185 in 0.54 seconds (4769 lines/second)
Physical Source Lines of Code (SLOC) = 86
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 45 in 0.53 seconds (1497 lines/second)
Physical Source Lines of Code (SLOC) = 14
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 67 in 0.53 seconds (2117 lines/second)
Physical Source Lines of Code (SLOC) = 24
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/lowglobals.h:61:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 80 in 0.53 seconds (2379 lines/second)
Physical Source Lines of Code (SLOC) = 32
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 31.25 [1+] 31.25 [2+] 31.25 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 234 in 0.54 seconds (5565 lines/second)
Physical Source Lines of Code (SLOC) = 141
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 271 in 0.55 seconds (5676 lines/second)
Physical Source Lines of Code (SLOC) = 200
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 66 in 0.53 seconds (1971 lines/second)
Physical Source Lines of Code (SLOC) = 4
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 62 in 0.53 seconds (1963 lines/second)
Physical Source Lines of Code (SLOC) = 19
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/lapic.c:240:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 744 in 0.57 seconds (11119 lines/second)
Physical Source Lines of Code (SLOC) = 531
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 1.88324 [1+] 1.88324 [2+] 1.88324 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 69 in 0.53 seconds (2089 lines/second)
Physical Source Lines of Code (SLOC) = 6
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 64 in 0.53 seconds (1939 lines/second)
Physical Source Lines of Code (SLOC) = 0
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0

Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 126 in 0.53 seconds (3710 lines/second)
Physical Source Lines of Code (SLOC) = 75
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 53 in 0.53 seconds (1706 lines/second)
Physical Source Lines of Code (SLOC) = 15
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 135 in 0.54 seconds (3520 lines/second)
Physical Source Lines of Code (SLOC) = 58
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 215 in 0.54 seconds (5277 lines/second)
Physical Source Lines of Code (SLOC) = 116
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 105 in 0.54 seconds (2974 lines/second)
Physical Source Lines of Code (SLOC) = 41
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 42 in 0.53 seconds (1383 lines/second)
Physical Source Lines of Code (SLOC) = 5
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 1637 in 0.63 seconds (12686 lines/second)
Physical Source Lines of Code (SLOC) = 1094
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 70 in 0.53 seconds (2160 lines/second)
Physical Source Lines of Code (SLOC) = 4
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 61 in 0.53 seconds (1972 lines/second)
Physical Source Lines of Code (SLOC) = 26
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/bsd_i386.c:227:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/bsd_i386.c:229:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/bsd_i386.c:231:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 3
Lines analyzed = 939 in 0.57 seconds (12996 lines/second)
Physical Source Lines of Code (SLOC) = 609
Hits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 4.92611 [1+] 4.92611 [2+] 4.92611 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 2103 in 0.65 seconds (14472 lines/second)
Physical Source Lines of Code (SLOC) = 1259
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 83 in 0.53 seconds (2441 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 912 in 0.58 seconds (11212 lines/second)
Physical Source Lines of Code (SLOC) = 578
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 532 in 0.56 seconds (8635 lines/second)
Physical Source Lines of Code (SLOC) = 397
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 101 in 0.54 seconds (2828 lines/second)
Physical Source Lines of Code (SLOC) = 27
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/fpu.c:299:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/fpu.c:356:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/fpu.c:379:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/fpu.c:433:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 4
Lines analyzed = 761 in 0.57 seconds (10971 lines/second)
Physical Source Lines of Code (SLOC) = 390
Hits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 10.2564 [1+] 10.2564 [2+] 10.2564 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 72 in 0.53 seconds (2127 lines/second)
Physical Source Lines of Code (SLOC) = 38
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/mp.c:165:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/mp.c:475:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/mp.c:1428:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/mp.c:476:  [1] (port) snprintf: On some very old systems, snprintf is incorrectly implemented and permits buffer overflows; there are also incompatible standard definitions of it. Check it during installation, or use something else. 

Hits = 4
Lines analyzed = 1465 in 0.60 seconds (14221 lines/second)
Physical Source Lines of Code (SLOC) = 969
Hits@level = [0]   0 [1]   1 [2]   3 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   4 [1+]   4 [2+]   3 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 4.12797 [1+] 4.12797 [2+] 3.09598 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 4467 in 0.79 seconds (15335 lines/second)
Physical Source Lines of Code (SLOC) = 2677
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 285 in 0.55 seconds (6333 lines/second)
Physical Source Lines of Code (SLOC) = 154
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 77 in 0.53 seconds (2260 lines/second)
Physical Source Lines of Code (SLOC) = 19
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 602 in 0.56 seconds (10216 lines/second)
Physical Source Lines of Code (SLOC) = 367
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 499 in 0.56 seconds (8592 lines/second)
Physical Source Lines of Code (SLOC) = 337
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/phys.c:173:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/phys.c:206:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/phys.c:267:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 3
Lines analyzed = 275 in 0.54 seconds (6268 lines/second)
Physical Source Lines of Code (SLOC) = 162
Hits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 18.5185 [1+] 18.5185 [2+] 18.5185 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/db_gcc_aout.c:386:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/db_gcc_aout.c:158:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/db_gcc_aout.c:179:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 

Hits = 3
Lines analyzed = 687 in 0.57 seconds (9690 lines/second)
Physical Source Lines of Code (SLOC) = 452
Hits@level = [0]   0 [1]   2 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 6.63717 [1+] 6.63717 [2+] 2.21239 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 34 in 0.53 seconds (1140 lines/second)
Physical Source Lines of Code (SLOC) = 3
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/db_disasm.c:990:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/db_disasm.c:1001:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/db_disasm.c:1007:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 3
Lines analyzed = 1826 in 0.69 seconds (9766 lines/second)
Physical Source Lines of Code (SLOC) = 1448
Hits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 2.07182 [1+] 2.07182 [2+] 2.07182 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 52 in 0.53 seconds (1680 lines/second)
Physical Source Lines of Code (SLOC) = 11
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 363 in 0.54 seconds (8130 lines/second)
Physical Source Lines of Code (SLOC) = 251
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 94 in 0.53 seconds (2713 lines/second)
Physical Source Lines of Code (SLOC) = 28
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 46 in 0.53 seconds (1496 lines/second)
Physical Source Lines of Code (SLOC) = 9
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 273 in 0.54 seconds (6294 lines/second)
Physical Source Lines of Code (SLOC) = 115
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 41 in 0.53 seconds (1351 lines/second)
Physical Source Lines of Code (SLOC) = 4
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 880 in 0.58 seconds (10735 lines/second)
Physical Source Lines of Code (SLOC) = 695
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 55 in 0.53 seconds (1761 lines/second)
Physical Source Lines of Code (SLOC) = 13
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 623 in 0.58 seconds (7781 lines/second)
Physical Source Lines of Code (SLOC) = 478
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/cpuid.h:189:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/cpuid.h:190:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 2
Lines analyzed = 296 in 0.55 seconds (6042 lines/second)
Physical Source Lines of Code (SLOC) = 192
Hits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 10.4167 [1+] 10.4167 [2+] 10.4167 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 714 in 0.56 seconds (10989 lines/second)
Physical Source Lines of Code (SLOC) = 444
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 635 in 0.56 seconds (11205 lines/second)
Physical Source Lines of Code (SLOC) = 392
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/mp_desc.h:135:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/mp_desc.h:155:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/mp_desc.h:175:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 

Hits = 3
Lines analyzed = 192 in 0.54 seconds (4740 lines/second)
Physical Source Lines of Code (SLOC) = 93
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   3 [5]   0
Hits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   3 [4+]   3 [5+]   0
Hits/KSLOC@level+ = [0+] 32.2581 [1+] 32.2581 [2+] 32.2581 [3+] 32.2581 [4+] 32.2581 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/iopb.h:77:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 93 in 0.53 seconds (2700 lines/second)
Physical Source Lines of Code (SLOC) = 17
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 58.8235 [1+] 58.8235 [2+] 58.8235 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 67 in 0.53 seconds (2074 lines/second)
Physical Source Lines of Code (SLOC) = 3
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 232 in 0.54 seconds (5622 lines/second)
Physical Source Lines of Code (SLOC) = 167
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 148 in 0.54 seconds (3898 lines/second)
Physical Source Lines of Code (SLOC) = 86
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/mp_desc.c:383:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/mp_desc.c:392:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/mp_desc.c:400:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/mp_desc.c:705:  [4] (race) access: This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition. Set up the correct permissions (e.g., using setuid()) and try to open the file directly. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/mp_desc.c:410:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/mp_desc.c:511:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/mp_desc.c:512:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/mp_desc.c:513:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/mp_desc.c:518:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/mp_desc.c:620:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/mp_desc.c:621:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/mp_desc.c:622:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/i386/mp_desc.c:623:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 

Hits = 13
Lines analyzed = 1028 in 0.59 seconds (11010 lines/second)
Physical Source Lines of Code (SLOC) = 627
Hits@level = [0]   0 [1]   0 [2]   9 [3]   0 [4]   4 [5]   0
Hits@level+ = [0+]  13 [1+]  13 [2+]  13 [3+]   4 [4+]   4 [5+]   0
Hits/KSLOC@level+ = [0+] 20.7337 [1+] 20.7337 [2+] 20.7337 [3+] 6.37959 [4+] 6.37959 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 99 in 0.54 seconds (2371 lines/second)
Physical Source Lines of Code (SLOC) = 8
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 241 in 0.55 seconds (5061 lines/second)
Physical Source Lines of Code (SLOC) = 140
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 317 in 0.55 seconds (6483 lines/second)
Physical Source Lines of Code (SLOC) = 189
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 126 in 0.54 seconds (3547 lines/second)
Physical Source Lines of Code (SLOC) = 48
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/libsa/string.h:68:  [4] (buffer) strcpy: Does not check for buffer overflows when copying to destination. Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/libsa/string.h:75:  [4] (buffer) strcat: Does not check for buffer overflows when concatenating to destination. Consider using strncat or strlcat (warning, strncat is easily misused). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/libsa/string.h:59:  [2] (buffer) memcpy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/libsa/string.h:89:  [2] (buffer) bcopy: Does not check for buffer overflows when copying to destination. Make sure destination can always hold the source data. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/libsa/string.h:64:  [1] (buffer) strlen: Does not handle strings that are not \0-terminated (it could cause a crash if unprotected). 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/libsa/string.h:69:  [1] (buffer) strncpy: Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/libsa/string.h:76:  [1] (buffer) strncat: Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add). Consider strlcat or automatically resizing strings. 

Hits = 7
Lines analyzed = 96 in 0.54 seconds (2321 lines/second)
Physical Source Lines of Code (SLOC) = 43
Hits@level = [0]   0 [1]   3 [2]   2 [3]   0 [4]   2 [5]   0
Hits@level+ = [0+]   7 [1+]   7 [2+]   4 [3+]   2 [4+]   2 [5+]   0
Hits/KSLOC@level+ = [0+] 162.791 [1+] 162.791 [2+] 93.0233 [3+] 46.5116 [4+] 46.5116 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 108 in 0.53 seconds (3139 lines/second)
Physical Source Lines of Code (SLOC) = 40
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 69 in 0.53 seconds (2120 lines/second)
Physical Source Lines of Code (SLOC) = 9
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 71 in 0.53 seconds (2105 lines/second)
Physical Source Lines of Code (SLOC) = 13
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/libsa/stdlib.h:77:  [3] (buffer) getenv: Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once. Check environment variables carefully before using them. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/libsa/stdlib.h:69:  [2] (integer) atoi: Unless checked, the resulting number can exceed the expected range.  If source untrusted, check both minimum and maximum, even if the input had no minus sign (large numbers can roll over into negative number; consider saving to an unsigned value if that is intended). 

Hits = 2
Lines analyzed = 84 in 0.53 seconds (2453 lines/second)
Physical Source Lines of Code (SLOC) = 17
Hits@level = [0]   0 [1]   0 [2]   1 [3]   1 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   1 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 117.647 [1+] 117.647 [2+] 117.647 [3+] 58.8235 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 76 in 0.53 seconds (2288 lines/second)
Physical Source Lines of Code (SLOC) = 13
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1297 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 32 in 0.53 seconds (1105 lines/second)
Physical Source Lines of Code (SLOC) = 4
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 141 in 0.53 seconds (4073 lines/second)
Physical Source Lines of Code (SLOC) = 86
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 370 in 0.56 seconds (5965 lines/second)
Physical Source Lines of Code (SLOC) = 131
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 91 in 0.53 seconds (2652 lines/second)
Physical Source Lines of Code (SLOC) = 5
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 700 in 0.57 seconds (10167 lines/second)
Physical Source Lines of Code (SLOC) = 356
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 132 in 0.54 seconds (3610 lines/second)
Physical Source Lines of Code (SLOC) = 42
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 141 in 0.54 seconds (3731 lines/second)
Physical Source Lines of Code (SLOC) = 41
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 260 in 0.55 seconds (5543 lines/second)
Physical Source Lines of Code (SLOC) = 58
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 94 in 0.53 seconds (2708 lines/second)
Physical Source Lines of Code (SLOC) = 12
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 146 in 0.54 seconds (4102 lines/second)
Physical Source Lines of Code (SLOC) = 51
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 169 in 0.54 seconds (4402 lines/second)
Physical Source Lines of Code (SLOC) = 69
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 104 in 0.53 seconds (3002 lines/second)
Physical Source Lines of Code (SLOC) = 14
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 385 in 0.55 seconds (7254 lines/second)
Physical Source Lines of Code (SLOC) = 172
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 127 in 0.54 seconds (3481 lines/second)
Physical Source Lines of Code (SLOC) = 23
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 123 in 0.54 seconds (3392 lines/second)
Physical Source Lines of Code (SLOC) = 7
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 218 in 0.54 seconds (5176 lines/second)
Physical Source Lines of Code (SLOC) = 51
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 62 in 0.53 seconds (1898 lines/second)
Physical Source Lines of Code (SLOC) = 4
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 180 in 0.54 seconds (4440 lines/second)
Physical Source Lines of Code (SLOC) = 77
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 96 in 0.53 seconds (2756 lines/second)
Physical Source Lines of Code (SLOC) = 25
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 47 in 0.53 seconds (1548 lines/second)
Physical Source Lines of Code (SLOC) = 7
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 77 in 0.53 seconds (2304 lines/second)
Physical Source Lines of Code (SLOC) = 11
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 207 in 0.54 seconds (5188 lines/second)
Physical Source Lines of Code (SLOC) = 129
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 89 in 0.53 seconds (2568 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 58 in 0.53 seconds (1658 lines/second)
Physical Source Lines of Code (SLOC) = 20
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1264 lines/second)
Physical Source Lines of Code (SLOC) = 6
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 148 in 0.54 seconds (3769 lines/second)
Physical Source Lines of Code (SLOC) = 53
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 114 in 0.54 seconds (3096 lines/second)
Physical Source Lines of Code (SLOC) = 27
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 78 in 0.54 seconds (2026 lines/second)
Physical Source Lines of Code (SLOC) = 15
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 73 in 0.53 seconds (2181 lines/second)
Physical Source Lines of Code (SLOC) = 4
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 150 in 0.54 seconds (4094 lines/second)
Physical Source Lines of Code (SLOC) = 51
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 157 in 0.54 seconds (3965 lines/second)
Physical Source Lines of Code (SLOC) = 31
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 176 in 0.54 seconds (4503 lines/second)
Physical Source Lines of Code (SLOC) = 109
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 119 in 0.54 seconds (3268 lines/second)
Physical Source Lines of Code (SLOC) = 27
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 43 in 0.53 seconds (1440 lines/second)
Physical Source Lines of Code (SLOC) = 11
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 42 in 0.53 seconds (1362 lines/second)
Physical Source Lines of Code (SLOC) = 7
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 79 in 0.53 seconds (2450 lines/second)
Physical Source Lines of Code (SLOC) = 32
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 234 in 0.54 seconds (5489 lines/second)
Physical Source Lines of Code (SLOC) = 161
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 427 in 0.56 seconds (7545 lines/second)
Physical Source Lines of Code (SLOC) = 350
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 392 in 0.55 seconds (7596 lines/second)
Physical Source Lines of Code (SLOC) = 310
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 35 in 0.53 seconds (1151 lines/second)
Physical Source Lines of Code (SLOC) = 3
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 74 in 0.53 seconds (2242 lines/second)
Physical Source Lines of Code (SLOC) = 8
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 74 in 0.53 seconds (2237 lines/second)
Physical Source Lines of Code (SLOC) = 6
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 100 in 0.53 seconds (2985 lines/second)
Physical Source Lines of Code (SLOC) = 39
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 1220 in 0.65 seconds (7936 lines/second)
Physical Source Lines of Code (SLOC) = 163
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 133 in 0.54 seconds (3579 lines/second)
Physical Source Lines of Code (SLOC) = 13
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 37 in 0.53 seconds (1240 lines/second)
Physical Source Lines of Code (SLOC) = 6
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 134 in 0.54 seconds (3511 lines/second)
Physical Source Lines of Code (SLOC) = 47
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach/mig.h:179:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 303 in 0.59 seconds (3380 lines/second)
Physical Source Lines of Code (SLOC) = 139
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 7.19424 [1+] 7.19424 [2+] 7.19424 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 555 in 0.55 seconds (10382 lines/second)
Physical Source Lines of Code (SLOC) = 402
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 99 in 0.54 seconds (2727 lines/second)
Physical Source Lines of Code (SLOC) = 17
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 80 in 0.53 seconds (2306 lines/second)
Physical Source Lines of Code (SLOC) = 11
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 124 in 0.54 seconds (2903 lines/second)
Physical Source Lines of Code (SLOC) = 38
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 275 in 0.54 seconds (6459 lines/second)
Physical Source Lines of Code (SLOC) = 146
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach/kmod.h:91:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach/kmod.h:92:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 2
Lines analyzed = 186 in 0.54 seconds (4587 lines/second)
Physical Source Lines of Code (SLOC) = 97
Hits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 20.6186 [1+] 20.6186 [2+] 20.6186 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 37 in 0.53 seconds (1234 lines/second)
Physical Source Lines of Code (SLOC) = 4
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 69 in 0.53 seconds (2246 lines/second)
Physical Source Lines of Code (SLOC) = 23
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 58 in 0.53 seconds (1867 lines/second)
Physical Source Lines of Code (SLOC) = 13
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 83 in 0.53 seconds (2451 lines/second)
Physical Source Lines of Code (SLOC) = 8
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 184 in 0.54 seconds (4640 lines/second)
Physical Source Lines of Code (SLOC) = 61
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 61 in 0.53 seconds (1879 lines/second)
Physical Source Lines of Code (SLOC) = 17
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 248 in 0.54 seconds (5525 lines/second)
Physical Source Lines of Code (SLOC) = 147
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 51 in 0.53 seconds (1657 lines/second)
Physical Source Lines of Code (SLOC) = 8
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach/host_info.h:86:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach/host_info.h:89:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 2
Lines analyzed = 232 in 0.54 seconds (5397 lines/second)
Physical Source Lines of Code (SLOC) = 121
Hits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 16.5289 [1+] 16.5289 [2+] 16.5289 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 792 in 0.58 seconds (10036 lines/second)
Physical Source Lines of Code (SLOC) = 398
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 97 in 0.53 seconds (2987 lines/second)
Physical Source Lines of Code (SLOC) = 54
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 235 in 0.54 seconds (5928 lines/second)
Physical Source Lines of Code (SLOC) = 113
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 40 in 0.53 seconds (1325 lines/second)
Physical Source Lines of Code (SLOC) = 3
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 180 in 0.54 seconds (4516 lines/second)
Physical Source Lines of Code (SLOC) = 52
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 135 in 0.54 seconds (3635 lines/second)
Physical Source Lines of Code (SLOC) = 53
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 126 in 0.54 seconds (3538 lines/second)
Physical Source Lines of Code (SLOC) = 52
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 320 in 0.55 seconds (6870 lines/second)
Physical Source Lines of Code (SLOC) = 190
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 62 in 0.53 seconds (2032 lines/second)
Physical Source Lines of Code (SLOC) = 27
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 72 in 0.54 seconds (1946 lines/second)
Physical Source Lines of Code (SLOC) = 8
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 139 in 0.55 seconds (2644 lines/second)
Physical Source Lines of Code (SLOC) = 62
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 135 in 0.54 seconds (3797 lines/second)
Physical Source Lines of Code (SLOC) = 55
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 88 in 0.53 seconds (2591 lines/second)
Physical Source Lines of Code (SLOC) = 12
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 88 in 0.54 seconds (2493 lines/second)
Physical Source Lines of Code (SLOC) = 7
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 322 in 0.55 seconds (6742 lines/second)
Physical Source Lines of Code (SLOC) = 56
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach/i386/fp_reg.h:81:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 1
Lines analyzed = 141 in 0.54 seconds (3572 lines/second)
Physical Source Lines of Code (SLOC) = 63
Hits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 15.873 [1+] 15.873 [2+] 15.873 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 535 in 0.56 seconds (9084 lines/second)
Physical Source Lines of Code (SLOC) = 301
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 155 in 0.54 seconds (4010 lines/second)
Physical Source Lines of Code (SLOC) = 34
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 37 in 0.53 seconds (1219 lines/second)
Physical Source Lines of Code (SLOC) = 3
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 135 in 0.54 seconds (3738 lines/second)
Physical Source Lines of Code (SLOC) = 36
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 104 in 0.54 seconds (2937 lines/second)
Physical Source Lines of Code (SLOC) = 27
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 45 in 0.53 seconds (1504 lines/second)
Physical Source Lines of Code (SLOC) = 11
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 42 in 0.53 seconds (1344 lines/second)
Physical Source Lines of Code (SLOC) = 7
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 170 in 0.54 seconds (4237 lines/second)
Physical Source Lines of Code (SLOC) = 65
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach/i386/_types.h:138:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach/i386/_types.h:139:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach/i386/_types.h:145:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach/i386/_types.h:189:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 4
Lines analyzed = 221 in 0.54 seconds (5702 lines/second)
Physical Source Lines of Code (SLOC) = 162
Hits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 24.6914 [1+] 24.6914 [2+] 24.6914 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 439 in 0.56 seconds (7267 lines/second)
Physical Source Lines of Code (SLOC) = 347
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach/i386/_structs.h:193:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach/i386/_structs.h:194:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach/i386/_structs.h:200:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach/i386/_structs.h:201:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach/i386/_structs.h:212:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach/i386/_structs.h:218:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach/i386/_structs.h:264:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach/i386/_structs.h:301:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach/i386/_structs.h:459:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
/home/posixninja/Desktop/Apple/OpenSource/xnu/xnu-1456.1.26/osfmk/mach/i386/_structs.h:510:  [2] (buffer) char: Statically-sized arrays can be overflowed. Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 

Hits = 10
Lines analyzed = 561 in 0.56 seconds (10128 lines/second)
Physical Source Lines of Code (SLOC) = 478
Hits@level = [0]   0 [1]   0 [2]  10 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]  10 [1+]  10 [2+]  10 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 20.9205 [1+] 20.9205 [2+] 20.9205 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 36 in 0.53 seconds (1209 lines/second)
Physical Source Lines of Code (SLOC) = 3
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 74 in 0.53 seconds (2227 lines/second)
Physical Source Lines of Code (SLOC) = 8
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 74 in 0.53 seconds (2227 lines/second)
Physical Source Lines of Code (SLOC) = 6
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 275 in 0.55 seconds (5933 lines/second)
Physical Source Lines of Code (SLOC) = 102
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 93 in 0.53 seconds (2723 lines/second)
Physical Source Lines of Code (SLOC) = 22
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 34 in 0.53 seconds (1127 lines/second)
Physical Source Lines of Code (SLOC) = 3
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 228 in 0.54 seconds (5470 lines/second)
Physical Source Lines of Code (SLOC) = 85
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 258 in 0.55 seconds (5314 lines/second)
Physical Source Lines of Code (SLOC) = 178
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 40 in 0.53 seconds (1342 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 40 in 0.53 seconds (1343 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 40 in 0.53 seconds (1333 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 40 in 0.53 seconds (1335 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 40 in 0.53 seconds (1331 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 40 in 0.53 seconds (1335 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 44 in 0.53 seconds (1444 lines/second)
Physical Source Lines of Code (SLOC) = 12
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 40 in 0.53 seconds (1319 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1295 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 40 in 0.53 seconds (1335 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 40 in 0.53 seconds (1336 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 40 in 0.53 seconds (1340 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 40 in 0.53 seconds (1308 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 361 in 0.55 seconds (6653 lines/second)
Physical Source Lines of Code (SLOC) = 145
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 154 in 0.54 seconds (4038 lines/second)
Physical Source Lines of Code (SLOC) = 48
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 269 in 0.55 seconds (5482 lines/second)
Physical Source Lines of Code (SLOC) = 95
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 244 in 0.54 seconds (5637 lines/second)
Physical Source Lines of Code (SLOC) = 123
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 46 in 0.54 seconds (1310 lines/second)
Physical Source Lines of Code (SLOC) = 13
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1295 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1309 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1310 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1292 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1276 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1289 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1293 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 43 in 0.53 seconds (1440 lines/second)
Physical Source Lines of Code (SLOC) = 12
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1309 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1305 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1314 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1313 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 53 in 0.53 seconds (1748 lines/second)
Physical Source Lines of Code (SLOC) = 22
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 43 in 0.53 seconds (1440 lines/second)
Physical Source Lines of Code (SLOC) = 12
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1297 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1287 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1306 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1307 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 43 in 0.53 seconds (1420 lines/second)
Physical Source Lines of Code (SLOC) = 12
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1307 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 43 in 0.53 seconds (1435 lines/second)
Physical Source Lines of Code (SLOC) = 12
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1300 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1299 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1307 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1308 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 39 in 0.53 seconds (1278 lines/second)
Physical Source Lines of Code (SLOC) = 10
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160

No hits found.
Lines analyzed = 43 in 0.53 seconds (1416 lines/second)
Physical Source Lines of Code (SLOC) = 12
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
